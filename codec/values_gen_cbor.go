// Code generated by github.com/daotl/cbor-gen. DO NOT EDIT.

package codec

import (
	"fmt"
	"io"
	"math"
	"sort"

	cbg "github.com/daotl/cbor-gen"
	cid "github.com/ipfs/go-cid"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *StringUint64T) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufStringUint64T = []byte{130}

func (t *StringUint64T) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	t.InitNilEmbeddedStruct()
	if _, err := w.Write(lengthBufStringUint64T); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.S (string) (string)
	if len(t.S) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.S was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.S))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.S)); err != nil {
		return err
	}

	// t.U (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U)); err != nil {
		return err
	}

	return nil
}

func (t *StringUint64T) UnmarshalCBOR(r io.Reader) error {
	*t = StringUint64T{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.S (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.S = string(sval)
	}
	// t.U (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.U = uint64(extra)

	}
	return nil
}

func (t *AnonInTestStruc) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufAnonInTestStruc = []byte{138}

func (t *AnonInTestStruc) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	t.InitNilEmbeddedStruct()
	if _, err := w.Write(lengthBufAnonInTestStruc); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.AS (string) (string)
	if len(t.AS) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.AS was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.AS))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.AS)); err != nil {
		return err
	}

	// t.AI64 (int64) (int64)
	if t.AI64 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AI64)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.AI64-1)); err != nil {
			return err
		}
	}

	// t.AI16 (int16) (int16)
	if t.AI16 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AI16)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.AI16-1)); err != nil {
			return err
		}
	}

	// t.AUi64 (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AUi64)); err != nil {
		return err
	}

	// t.AI64slice ([]int64) (slice)
	if len(t.AI64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64slice))); err != nil {
		return err
	}
	for _, v := range t.AI64slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AUi64slice ([]uint64) (slice)
	if len(t.AUi64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AUi64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AUi64slice))); err != nil {
		return err
	}
	for _, v := range t.AUi64slice {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.AI64arr8 ([8]int64) (array)
	if len(t.AI64arr8) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64arr8 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64arr8))); err != nil {
		return err
	}
	for _, v := range t.AI64arr8 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AI64arr0 ([0]int64) (array)
	if len(t.AI64arr0) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64arr0 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64arr0))); err != nil {
		return err
	}
	for _, v := range t.AI64arr0 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AI64slice0 ([]int64) (slice)
	if len(t.AI64slice0) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64slice0 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64slice0))); err != nil {
		return err
	}
	for _, v := range t.AI64slice0 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AUi64sliceN ([]uint64) (slice)
	if len(t.AUi64sliceN) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AUi64sliceN was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AUi64sliceN))); err != nil {
		return err
	}
	for _, v := range t.AUi64sliceN {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *AnonInTestStruc) UnmarshalCBOR(r io.Reader) error {
	*t = AnonInTestStruc{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 10 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AS (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.AS = string(sval)
	}
	// t.AI64 (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.AI64 = int64(extraI)
	}
	// t.AI16 (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.AI16 = int16(extraI)
	}
	// t.AUi64 (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.AUi64 = uint64(extra)

	}
	// t.AI64slice ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AI64slice = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64slice[i] = int64(extraI)
		}
	}

	// t.AUi64slice ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AUi64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AUi64slice = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AUi64slice slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AUi64slice was not a uint, instead got %d", maj)
		}

		t.AUi64slice[i] = uint64(val)
	}

	// t.AI64arr8 ([8]int64) (array)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64arr8: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 8 {
		return fmt.Errorf("expected array to have 8 elements")
	}

	t.AI64arr8 = [8]int64{}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64arr8[i] = int64(extraI)
		}
	}

	// t.AI64arr0 ([0]int64) (array)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64arr0: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 0 {
		return fmt.Errorf("expected array to have 0 elements")
	}

	t.AI64arr0 = [0]int64{}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64arr0[i] = int64(extraI)
		}
	}

	// t.AI64slice0 ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64slice0: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AI64slice0 = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64slice0[i] = int64(extraI)
		}
	}

	// t.AUi64sliceN ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AUi64sliceN: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AUi64sliceN = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AUi64sliceN slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AUi64sliceN was not a uint, instead got %d", maj)
		}

		t.AUi64sliceN[i] = uint64(val)
	}

	return nil
}

func (t *TestSimpleFields) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufTestSimpleFields = []byte{137}

func (t *TestSimpleFields) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	t.InitNilEmbeddedStruct()
	if _, err := w.Write(lengthBufTestSimpleFields); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.S (string) (string)
	if len(t.S) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.S was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.S))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.S)); err != nil {
		return err
	}

	// t.I64 (int64) (int64)
	if t.I64 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I64)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I64-1)); err != nil {
			return err
		}
	}

	// t.I8 (int8) (int8)
	if t.I8 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8-1)); err != nil {
			return err
		}
	}

	// t.Ui64 (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui64)); err != nil {
		return err
	}

	// t.Ui8 (uint8) (uint8)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui8)); err != nil {
		return err
	}

	// t.B (bool) (bool)
	if err := cbg.WriteBool(w, t.B); err != nil {
		return err
	}

	// t.I32slice ([]int32) (slice)
	if len(t.I32slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.I32slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.I32slice))); err != nil {
		return err
	}
	for _, v := range t.I32slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.Ui64slice ([]uint64) (slice)
	if len(t.Ui64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Ui64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Ui64slice))); err != nil {
		return err
	}
	for _, v := range t.Ui64slice {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.WrapSliceInt64 (codec.wrapSliceUint64) (slice)
	if len(t.WrapSliceInt64) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.WrapSliceInt64 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.WrapSliceInt64))); err != nil {
		return err
	}
	for _, v := range t.WrapSliceInt64 {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *TestSimpleFields) UnmarshalCBOR(r io.Reader) error {
	*t = TestSimpleFields{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 9 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.S (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.S = string(sval)
	}
	// t.I64 (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I64 = int64(extraI)
	}
	// t.I8 (int8) (int8)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8 = int8(extraI)
	}
	// t.Ui64 (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Ui64 = uint64(extra)

	}
	// t.Ui8 (uint8) (uint8)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui8 = uint8(extra)
	// t.B (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.B = false
	case 21:
		t.B = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.I32slice ([]int32) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.I32slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.I32slice = make([]int32, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int32
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int32(extra)
				if extraI < 0 {
					return fmt.Errorf("int32 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int32(extra)
				if extraI < 0 {
					return fmt.Errorf("int32 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int32 field: %d", maj)
			}

			t.I32slice[i] = int32(extraI)
		}
	}

	// t.Ui64slice ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Ui64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Ui64slice = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Ui64slice slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Ui64slice was not a uint, instead got %d", maj)
		}

		t.Ui64slice[i] = uint64(val)
	}

	// t.WrapSliceInt64 (codec.wrapSliceUint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.WrapSliceInt64: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.WrapSliceInt64 = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.WrapSliceInt64 slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.WrapSliceInt64 was not a uint, instead got %d", maj)
		}

		t.WrapSliceInt64[i] = uint64(val)
	}

	return nil
}

func (t *TestStrucCommon) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufTestStrucCommon = []byte{152, 36}

func (t *TestStrucCommon) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	t.InitNilEmbeddedStruct()
	if _, err := w.Write(lengthBufTestStrucCommon); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.S (string) (string)
	if len(t.S) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.S was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.S))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.S)); err != nil {
		return err
	}

	// t.I64 (int64) (int64)
	if t.I64 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I64)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I64-1)); err != nil {
			return err
		}
	}

	// t.I32 (int32) (int32)
	if t.I32 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32-1)); err != nil {
			return err
		}
	}

	// t.I16 (int16) (int16)
	if t.I16 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16-1)); err != nil {
			return err
		}
	}

	// t.I8 (int8) (int8)
	if t.I8 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8-1)); err != nil {
			return err
		}
	}

	// t.I64n (int64) (int64)
	if t.I64n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I64n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I64n-1)); err != nil {
			return err
		}
	}

	// t.I32n (int32) (int32)
	if t.I32n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32n-1)); err != nil {
			return err
		}
	}

	// t.I16n (int16) (int16)
	if t.I16n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16n-1)); err != nil {
			return err
		}
	}

	// t.I8n (int8) (int8)
	if t.I8n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8n-1)); err != nil {
			return err
		}
	}

	// t.Ui64 (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui64)); err != nil {
		return err
	}

	// t.Ui32 (uint32) (uint32)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui32)); err != nil {
		return err
	}

	// t.Ui16 (uint16) (uint16)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui16)); err != nil {
		return err
	}

	// t.Ui8 (uint8) (uint8)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui8)); err != nil {
		return err
	}

	// t.B (bool) (bool)
	if err := cbg.WriteBool(w, t.B); err != nil {
		return err
	}

	// t.By (uint8) (uint8)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.By)); err != nil {
		return err
	}

	// t.I64slice ([]int64) (slice)
	if len(t.I64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.I64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.I64slice))); err != nil {
		return err
	}
	for _, v := range t.I64slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.I32slice ([]int32) (slice)
	if len(t.I32slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.I32slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.I32slice))); err != nil {
		return err
	}
	for _, v := range t.I32slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.Ui64slice ([]uint64) (slice)
	if len(t.Ui64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Ui64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Ui64slice))); err != nil {
		return err
	}
	for _, v := range t.Ui64slice {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.Byslice ([]uint8) (slice)
	if len(t.Byslice) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Byslice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Byslice))); err != nil {
		return err
	}

	if _, err := w.Write(t.Byslice[:]); err != nil {
		return err
	}

	// t.BytesSlice ([][]uint8) (slice)
	if len(t.BytesSlice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.BytesSlice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.BytesSlice))); err != nil {
		return err
	}
	for _, v := range t.BytesSlice {
		if len(v) > cbg.ByteArrayMaxLen {
			return xerrors.Errorf("Byte array in field v was too long")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return err
		}

		if _, err := w.Write(v[:]); err != nil {
			return err
		}
	}

	// t.WrapSliceInt64 (codec.wrapSliceUint64) (slice)
	if len(t.WrapSliceInt64) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.WrapSliceInt64 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.WrapSliceInt64))); err != nil {
		return err
	}
	for _, v := range t.WrapSliceInt64 {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.Simplef (codec.TestSimpleFields) (struct)
	if err := t.Simplef.MarshalCBOR(w); err != nil {
		return err
	}

	// t.SstrUi64T ([]codec.StringUint64T) (slice)
	if len(t.SstrUi64T) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.SstrUi64T was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SstrUi64T))); err != nil {
		return err
	}
	for _, v := range t.SstrUi64T {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.MstrUi64T (map[string]*codec.StringUint64T) (map)
	{
		if len(t.MstrUi64T) > 4096 {
			return xerrors.Errorf("cannot marshal t.MstrUi64T map too large")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajMap, uint64(len(t.MstrUi64T))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.MstrUi64T))
		for k := range t.MstrUi64T {
			keys = append(keys, k)
		}
		cbg.MapKeySort_RFC7049(keys)
		for _, k := range keys {
			v := t.MstrUi64T[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(w); err != nil {
				return err
			}

		}
	}

	// t.AS (string) (string)
	if len(t.AS) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.AS was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.AS))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.AS)); err != nil {
		return err
	}

	// t.AI64 (int64) (int64)
	if t.AI64 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AI64)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.AI64-1)); err != nil {
			return err
		}
	}

	// t.AI16 (int16) (int16)
	if t.AI16 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AI16)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.AI16-1)); err != nil {
			return err
		}
	}

	// t.AUi64 (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AUi64)); err != nil {
		return err
	}

	// t.AI64slice ([]int64) (slice)
	if len(t.AI64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64slice))); err != nil {
		return err
	}
	for _, v := range t.AI64slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AUi64slice ([]uint64) (slice)
	if len(t.AUi64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AUi64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AUi64slice))); err != nil {
		return err
	}
	for _, v := range t.AUi64slice {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.AI64arr8 ([8]int64) (array)
	if len(t.AI64arr8) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64arr8 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64arr8))); err != nil {
		return err
	}
	for _, v := range t.AI64arr8 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AI64arr0 ([0]int64) (array)
	if len(t.AI64arr0) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64arr0 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64arr0))); err != nil {
		return err
	}
	for _, v := range t.AI64arr0 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AI64slice0 ([]int64) (slice)
	if len(t.AI64slice0) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64slice0 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64slice0))); err != nil {
		return err
	}
	for _, v := range t.AI64slice0 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AUi64sliceN ([]uint64) (slice)
	if len(t.AUi64sliceN) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AUi64sliceN was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AUi64sliceN))); err != nil {
		return err
	}
	for _, v := range t.AUi64sliceN {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.NotAnon (codec.AnonInTestStruc) (struct)
	if err := t.NotAnon.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Nslice ([]uint8) (slice)
	if len(t.Nslice) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Nslice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Nslice))); err != nil {
		return err
	}

	if _, err := w.Write(t.Nslice[:]); err != nil {
		return err
	}
	return nil
}

func (t *TestStrucCommon) UnmarshalCBOR(r io.Reader) error {
	*t = TestStrucCommon{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 36 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.S (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.S = string(sval)
	}
	// t.I64 (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I64 = int64(extraI)
	}
	// t.I32 (int32) (int32)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32 = int32(extraI)
	}
	// t.I16 (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16 = int16(extraI)
	}
	// t.I8 (int8) (int8)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8 = int8(extraI)
	}
	// t.I64n (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I64n = int64(extraI)
	}
	// t.I32n (int32) (int32)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32n = int32(extraI)
	}
	// t.I16n (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16n = int16(extraI)
	}
	// t.I8n (int8) (int8)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8n = int8(extraI)
	}
	// t.Ui64 (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Ui64 = uint64(extra)

	}
	// t.Ui32 (uint32) (uint32)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui32 = uint32(extra)
	// t.Ui16 (uint16) (uint16)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui16 = uint16(extra)
	// t.Ui8 (uint8) (uint8)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui8 = uint8(extra)
	// t.B (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.B = false
	case 21:
		t.B = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.By (uint8) (uint8)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.By = uint8(extra)
	// t.I64slice ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.I64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.I64slice = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.I64slice[i] = int64(extraI)
		}
	}

	// t.I32slice ([]int32) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.I32slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.I32slice = make([]int32, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int32
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int32(extra)
				if extraI < 0 {
					return fmt.Errorf("int32 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int32(extra)
				if extraI < 0 {
					return fmt.Errorf("int32 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int32 field: %d", maj)
			}

			t.I32slice[i] = int32(extraI)
		}
	}

	// t.Ui64slice ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Ui64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Ui64slice = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Ui64slice slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Ui64slice was not a uint, instead got %d", maj)
		}

		t.Ui64slice[i] = uint64(val)
	}

	// t.Byslice ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Byslice: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Byslice = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Byslice[:]); err != nil {
		return err
	}
	// t.BytesSlice ([][]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.BytesSlice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.BytesSlice = make([][]uint8, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.BytesSlice[i]: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.BytesSlice[i] = make([]uint8, extra)
			}

			if _, err := io.ReadFull(br, t.BytesSlice[i][:]); err != nil {
				return err
			}
		}
	}

	// t.WrapSliceInt64 (codec.wrapSliceUint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.WrapSliceInt64: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.WrapSliceInt64 = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.WrapSliceInt64 slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.WrapSliceInt64 was not a uint, instead got %d", maj)
		}

		t.WrapSliceInt64[i] = uint64(val)
	}

	// t.Simplef (codec.TestSimpleFields) (struct)

	{

		if err := t.Simplef.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Simplef: %w", err)
		}

	}
	// t.SstrUi64T ([]codec.StringUint64T) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.SstrUi64T: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.SstrUi64T = make([]StringUint64T, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v StringUint64T
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.SstrUi64T[i] = v
	}

	// t.MstrUi64T (map[string]*codec.StringUint64T) (map)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.MstrUi64T: map too large")
	}

	t.MstrUi64T = make(map[string]*StringUint64T, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v *StringUint64T

		{

			b, err := br.ReadByte()
			if err != nil {
				return err
			}
			if b != cbg.CborNull[0] {
				if err := br.UnreadByte(); err != nil {
					return err
				}
				v = new(StringUint64T)
				if err := v.UnmarshalCBOR(br); err != nil {
					return xerrors.Errorf("unmarshaling v pointer: %w", err)
				}
			}

		}

		t.MstrUi64T[k] = v

	}
	// t.AS (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.AS = string(sval)
	}
	// t.AI64 (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.AI64 = int64(extraI)
	}
	// t.AI16 (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.AI16 = int16(extraI)
	}
	// t.AUi64 (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.AUi64 = uint64(extra)

	}
	// t.AI64slice ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AI64slice = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64slice[i] = int64(extraI)
		}
	}

	// t.AUi64slice ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AUi64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AUi64slice = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AUi64slice slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AUi64slice was not a uint, instead got %d", maj)
		}

		t.AUi64slice[i] = uint64(val)
	}

	// t.AI64arr8 ([8]int64) (array)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64arr8: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 8 {
		return fmt.Errorf("expected array to have 8 elements")
	}

	t.AI64arr8 = [8]int64{}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64arr8[i] = int64(extraI)
		}
	}

	// t.AI64arr0 ([0]int64) (array)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64arr0: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 0 {
		return fmt.Errorf("expected array to have 0 elements")
	}

	t.AI64arr0 = [0]int64{}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64arr0[i] = int64(extraI)
		}
	}

	// t.AI64slice0 ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64slice0: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AI64slice0 = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64slice0[i] = int64(extraI)
		}
	}

	// t.AUi64sliceN ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AUi64sliceN: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AUi64sliceN = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AUi64sliceN slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AUi64sliceN was not a uint, instead got %d", maj)
		}

		t.AUi64sliceN[i] = uint64(val)
	}

	// t.NotAnon (codec.AnonInTestStruc) (struct)

	{

		if err := t.NotAnon.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.NotAnon: %w", err)
		}

	}
	// t.Nslice ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Nslice: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Nslice = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Nslice[:]); err != nil {
		return err
	}
	return nil
}

func (t *TestStruc) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufTestStruc = []byte{152, 40}

func (t *TestStruc) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	t.InitNilEmbeddedStruct()
	if _, err := w.Write(lengthBufTestStruc); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.S (string) (string)
	if len(t.S) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.S was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.S))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.S)); err != nil {
		return err
	}

	// t.I64 (int64) (int64)
	if t.I64 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I64)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I64-1)); err != nil {
			return err
		}
	}

	// t.I32 (int32) (int32)
	if t.I32 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32-1)); err != nil {
			return err
		}
	}

	// t.I16 (int16) (int16)
	if t.I16 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16-1)); err != nil {
			return err
		}
	}

	// t.I8 (int8) (int8)
	if t.I8 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8-1)); err != nil {
			return err
		}
	}

	// t.I64n (int64) (int64)
	if t.I64n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I64n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I64n-1)); err != nil {
			return err
		}
	}

	// t.I32n (int32) (int32)
	if t.I32n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32n-1)); err != nil {
			return err
		}
	}

	// t.I16n (int16) (int16)
	if t.I16n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16n-1)); err != nil {
			return err
		}
	}

	// t.I8n (int8) (int8)
	if t.I8n >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8n)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8n-1)); err != nil {
			return err
		}
	}

	// t.Ui64 (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui64)); err != nil {
		return err
	}

	// t.Ui32 (uint32) (uint32)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui32)); err != nil {
		return err
	}

	// t.Ui16 (uint16) (uint16)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui16)); err != nil {
		return err
	}

	// t.Ui8 (uint8) (uint8)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Ui8)); err != nil {
		return err
	}

	// t.B (bool) (bool)
	if err := cbg.WriteBool(w, t.B); err != nil {
		return err
	}

	// t.By (uint8) (uint8)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.By)); err != nil {
		return err
	}

	// t.I64slice ([]int64) (slice)
	if len(t.I64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.I64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.I64slice))); err != nil {
		return err
	}
	for _, v := range t.I64slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.I32slice ([]int32) (slice)
	if len(t.I32slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.I32slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.I32slice))); err != nil {
		return err
	}
	for _, v := range t.I32slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.Ui64slice ([]uint64) (slice)
	if len(t.Ui64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Ui64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Ui64slice))); err != nil {
		return err
	}
	for _, v := range t.Ui64slice {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.Byslice ([]uint8) (slice)
	if len(t.Byslice) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Byslice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Byslice))); err != nil {
		return err
	}

	if _, err := w.Write(t.Byslice[:]); err != nil {
		return err
	}

	// t.BytesSlice ([][]uint8) (slice)
	if len(t.BytesSlice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.BytesSlice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.BytesSlice))); err != nil {
		return err
	}
	for _, v := range t.BytesSlice {
		if len(v) > cbg.ByteArrayMaxLen {
			return xerrors.Errorf("Byte array in field v was too long")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return err
		}

		if _, err := w.Write(v[:]); err != nil {
			return err
		}
	}

	// t.WrapSliceInt64 (codec.wrapSliceUint64) (slice)
	if len(t.WrapSliceInt64) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.WrapSliceInt64 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.WrapSliceInt64))); err != nil {
		return err
	}
	for _, v := range t.WrapSliceInt64 {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.Simplef (codec.TestSimpleFields) (struct)
	if err := t.Simplef.MarshalCBOR(w); err != nil {
		return err
	}

	// t.SstrUi64T ([]codec.StringUint64T) (slice)
	if len(t.SstrUi64T) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.SstrUi64T was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SstrUi64T))); err != nil {
		return err
	}
	for _, v := range t.SstrUi64T {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.MstrUi64T (map[string]*codec.StringUint64T) (map)
	{
		if len(t.MstrUi64T) > 4096 {
			return xerrors.Errorf("cannot marshal t.MstrUi64T map too large")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajMap, uint64(len(t.MstrUi64T))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.MstrUi64T))
		for k := range t.MstrUi64T {
			keys = append(keys, k)
		}
		cbg.MapKeySort_RFC7049(keys)
		for _, k := range keys {
			v := t.MstrUi64T[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(w); err != nil {
				return err
			}

		}
	}

	// t.AS (string) (string)
	if len(t.AS) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.AS was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.AS))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.AS)); err != nil {
		return err
	}

	// t.AI64 (int64) (int64)
	if t.AI64 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AI64)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.AI64-1)); err != nil {
			return err
		}
	}

	// t.AI16 (int16) (int16)
	if t.AI16 >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AI16)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.AI16-1)); err != nil {
			return err
		}
	}

	// t.AUi64 (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.AUi64)); err != nil {
		return err
	}

	// t.AI64slice ([]int64) (slice)
	if len(t.AI64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64slice))); err != nil {
		return err
	}
	for _, v := range t.AI64slice {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AUi64slice ([]uint64) (slice)
	if len(t.AUi64slice) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AUi64slice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AUi64slice))); err != nil {
		return err
	}
	for _, v := range t.AUi64slice {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.AI64arr8 ([8]int64) (array)
	if len(t.AI64arr8) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64arr8 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64arr8))); err != nil {
		return err
	}
	for _, v := range t.AI64arr8 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AI64arr0 ([0]int64) (array)
	if len(t.AI64arr0) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64arr0 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64arr0))); err != nil {
		return err
	}
	for _, v := range t.AI64arr0 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AI64slice0 ([]int64) (slice)
	if len(t.AI64slice0) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AI64slice0 was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AI64slice0))); err != nil {
		return err
	}
	for _, v := range t.AI64slice0 {
		if v >= 0 {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return err
			}
		}
	}

	// t.AUi64sliceN ([]uint64) (slice)
	if len(t.AUi64sliceN) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AUi64sliceN was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AUi64sliceN))); err != nil {
		return err
	}
	for _, v := range t.AUi64sliceN {
		if err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}

	// t.NotAnon (codec.AnonInTestStruc) (struct)
	if err := t.NotAnon.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Nslice ([]uint8) (slice)
	if len(t.Nslice) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Nslice was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Nslice))); err != nil {
		return err
	}

	if _, err := w.Write(t.Nslice[:]); err != nil {
		return err
	}

	// t.Mtsptr (map[string]*codec.TestStruc) (map)
	{
		if len(t.Mtsptr) > 4096 {
			return xerrors.Errorf("cannot marshal t.Mtsptr map too large")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajMap, uint64(len(t.Mtsptr))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.Mtsptr))
		for k := range t.Mtsptr {
			keys = append(keys, k)
		}
		cbg.MapKeySort_RFC7049(keys)
		for _, k := range keys {
			v := t.Mtsptr[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(w); err != nil {
				return err
			}

		}
	}

	// t.Mts (map[string]codec.TestStruc) (map)
	{
		if len(t.Mts) > 4096 {
			return xerrors.Errorf("cannot marshal t.Mts map too large")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajMap, uint64(len(t.Mts))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.Mts))
		for k := range t.Mts {
			keys = append(keys, k)
		}
		cbg.MapKeySort_RFC7049(keys)
		for _, k := range keys {
			v := t.Mts[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(w); err != nil {
				return err
			}

		}
	}

	// t.Its ([]*codec.TestStruc) (slice)
	if len(t.Its) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Its was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Its))); err != nil {
		return err
	}
	for _, v := range t.Its {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.Nteststruc (codec.TestStruc) (struct)
	if err := t.Nteststruc.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *TestStruc) UnmarshalCBOR(r io.Reader) error {
	*t = TestStruc{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 40 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.S (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.S = string(sval)
	}
	// t.I64 (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I64 = int64(extraI)
	}
	// t.I32 (int32) (int32)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32 = int32(extraI)
	}
	// t.I16 (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16 = int16(extraI)
	}
	// t.I8 (int8) (int8)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8 = int8(extraI)
	}
	// t.I64n (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I64n = int64(extraI)
	}
	// t.I32n (int32) (int32)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32n = int32(extraI)
	}
	// t.I16n (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16n = int16(extraI)
	}
	// t.I8n (int8) (int8)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8n = int8(extraI)
	}
	// t.Ui64 (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Ui64 = uint64(extra)

	}
	// t.Ui32 (uint32) (uint32)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui32 = uint32(extra)
	// t.Ui16 (uint16) (uint16)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui16 = uint16(extra)
	// t.Ui8 (uint8) (uint8)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.Ui8 = uint8(extra)
	// t.B (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.B = false
	case 21:
		t.B = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.By (uint8) (uint8)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.By = uint8(extra)
	// t.I64slice ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.I64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.I64slice = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.I64slice[i] = int64(extraI)
		}
	}

	// t.I32slice ([]int32) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.I32slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.I32slice = make([]int32, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int32
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int32(extra)
				if extraI < 0 {
					return fmt.Errorf("int32 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int32(extra)
				if extraI < 0 {
					return fmt.Errorf("int32 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int32 field: %d", maj)
			}

			t.I32slice[i] = int32(extraI)
		}
	}

	// t.Ui64slice ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Ui64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Ui64slice = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.Ui64slice slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.Ui64slice was not a uint, instead got %d", maj)
		}

		t.Ui64slice[i] = uint64(val)
	}

	// t.Byslice ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Byslice: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Byslice = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Byslice[:]); err != nil {
		return err
	}
	// t.BytesSlice ([][]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.BytesSlice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.BytesSlice = make([][]uint8, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.BytesSlice[i]: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.BytesSlice[i] = make([]uint8, extra)
			}

			if _, err := io.ReadFull(br, t.BytesSlice[i][:]); err != nil {
				return err
			}
		}
	}

	// t.WrapSliceInt64 (codec.wrapSliceUint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.WrapSliceInt64: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.WrapSliceInt64 = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.WrapSliceInt64 slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.WrapSliceInt64 was not a uint, instead got %d", maj)
		}

		t.WrapSliceInt64[i] = uint64(val)
	}

	// t.Simplef (codec.TestSimpleFields) (struct)

	{

		if err := t.Simplef.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Simplef: %w", err)
		}

	}
	// t.SstrUi64T ([]codec.StringUint64T) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.SstrUi64T: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.SstrUi64T = make([]StringUint64T, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v StringUint64T
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.SstrUi64T[i] = v
	}

	// t.MstrUi64T (map[string]*codec.StringUint64T) (map)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.MstrUi64T: map too large")
	}

	t.MstrUi64T = make(map[string]*StringUint64T, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v *StringUint64T

		{

			b, err := br.ReadByte()
			if err != nil {
				return err
			}
			if b != cbg.CborNull[0] {
				if err := br.UnreadByte(); err != nil {
					return err
				}
				v = new(StringUint64T)
				if err := v.UnmarshalCBOR(br); err != nil {
					return xerrors.Errorf("unmarshaling v pointer: %w", err)
				}
			}

		}

		t.MstrUi64T[k] = v

	}
	// t.AS (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.AS = string(sval)
	}
	// t.AI64 (int64) (int64)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.AI64 = int64(extraI)
	}
	// t.AI16 (int16) (int16)
	{
		maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.AI16 = int16(extraI)
	}
	// t.AUi64 (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.AUi64 = uint64(extra)

	}
	// t.AI64slice ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AI64slice = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64slice[i] = int64(extraI)
		}
	}

	// t.AUi64slice ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AUi64slice: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AUi64slice = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AUi64slice slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AUi64slice was not a uint, instead got %d", maj)
		}

		t.AUi64slice[i] = uint64(val)
	}

	// t.AI64arr8 ([8]int64) (array)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64arr8: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 8 {
		return fmt.Errorf("expected array to have 8 elements")
	}

	t.AI64arr8 = [8]int64{}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64arr8[i] = int64(extraI)
		}
	}

	// t.AI64arr0 ([0]int64) (array)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64arr0: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 0 {
		return fmt.Errorf("expected array to have 0 elements")
	}

	t.AI64arr0 = [0]int64{}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64arr0[i] = int64(extraI)
		}
	}

	// t.AI64slice0 ([]int64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AI64slice0: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AI64slice0 = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return err
			}
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.AI64slice0[i] = int64(extraI)
		}
	}

	// t.AUi64sliceN ([]uint64) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AUi64sliceN: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AUi64sliceN = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.AUi64sliceN slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.AUi64sliceN was not a uint, instead got %d", maj)
		}

		t.AUi64sliceN[i] = uint64(val)
	}

	// t.NotAnon (codec.AnonInTestStruc) (struct)

	{

		if err := t.NotAnon.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.NotAnon: %w", err)
		}

	}
	// t.Nslice ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Nslice: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Nslice = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Nslice[:]); err != nil {
		return err
	}
	// t.Mtsptr (map[string]*codec.TestStruc) (map)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.Mtsptr: map too large")
	}

	t.Mtsptr = make(map[string]*TestStruc, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v *TestStruc

		{

			b, err := br.ReadByte()
			if err != nil {
				return err
			}
			if b != cbg.CborNull[0] {
				if err := br.UnreadByte(); err != nil {
					return err
				}
				v = new(TestStruc)
				if err := v.UnmarshalCBOR(br); err != nil {
					return xerrors.Errorf("unmarshaling v pointer: %w", err)
				}
			}

		}

		t.Mtsptr[k] = v

	}
	// t.Mts (map[string]codec.TestStruc) (map)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.Mts: map too large")
	}

	t.Mts = make(map[string]TestStruc, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v TestStruc

		{

			if err := v.UnmarshalCBOR(br); err != nil {
				return xerrors.Errorf("unmarshaling v: %w", err)
			}

		}

		t.Mts[k] = v

	}
	// t.Its ([]*codec.TestStruc) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Its: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Its = make([]*TestStruc, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v TestStruc
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Its[i] = &v
	}

	// t.Nteststruc (codec.TestStruc) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}
			t.Nteststruc = new(TestStruc)
			if err := t.Nteststruc.UnmarshalCBOR(br); err != nil {
				return xerrors.Errorf("unmarshaling t.Nteststruc pointer: %w", err)
			}
		}

	}
	return nil
}
