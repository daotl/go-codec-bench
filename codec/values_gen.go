//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package codec

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF89299 = 1
	codecSelferCcRAW9299  = 255
	// ----- value types used ----
	codecSelferValueTypeArray9299     = 10
	codecSelferValueTypeMap9299       = 9
	codecSelferValueTypeString9299    = 6
	codecSelferValueTypeInt9299       = 2
	codecSelferValueTypeUint9299      = 3
	codecSelferValueTypeFloat9299     = 4
	codecSelferValueTypeNil9299       = 1
	codecSelferBitsize9299            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil9299 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct9299 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer9299 struct{}

func codecSelfer9299False() bool { return false }
func codecSelfer9299True() bool  { return true }

func init() {
	if codec1978.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
}

func (wrapSliceUint64) codecSelferViaCodecgen() {}
func (x wrapSliceUint64) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		z.F.EncSliceUint64V(([]uint64)(x), e)
	} // end block: if x slice == nil
}

func (x *wrapSliceUint64) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	z.F.DecSliceUint64X((*[]uint64)(x), d)
}

func (wrapSliceString) codecSelferViaCodecgen() {}
func (x wrapSliceString) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		z.F.EncSliceStringV(([]string)(x), e)
	} // end block: if x slice == nil
}

func (x *wrapSliceString) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	z.F.DecSliceStringX((*[]string)(x), d)
}

func (wrapUint64) codecSelferViaCodecgen() {}
func (x wrapUint64) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	r.EncodeUint(uint64(x))
}

func (x *wrapUint64) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	*x = (wrapUint64)(r.DecodeUint64())
}

func (wrapString) codecSelferViaCodecgen() {}
func (x wrapString) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	r.EncodeString(string(x))
}

func (x *wrapString) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	*x = (wrapString)(z.DecStringZC(r.DecodeStringAsBytes()))
}

func (wrapUint64Slice) codecSelferViaCodecgen() {}
func (x wrapUint64Slice) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encwrapUint64Slice((wrapUint64Slice)(x), e)
	} // end block: if x slice == nil
}

func (x *wrapUint64Slice) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	h.decwrapUint64Slice((*wrapUint64Slice)(x), d)
}

func (wrapStringSlice) codecSelferViaCodecgen() {}
func (x wrapStringSlice) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encwrapStringSlice((wrapStringSlice)(x), e)
	} // end block: if x slice == nil
}

func (x *wrapStringSlice) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	h.decwrapStringSlice((*wrapStringSlice)(x), d)
}

func (stringUint64T) codecSelferViaCodecgen() {}
func (x *stringUint64T) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.S))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.U))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"S\"")
			} else {
				r.EncodeString(`S`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.S))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"U\"")
			} else {
				r.EncodeString(`U`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.U))
			z.EncWriteMapEnd()
		}
	}
}

func (x *stringUint64T) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9299 {
		*(x) = stringUint64T{}
	} else if yyct2 == codecSelferValueTypeMap9299 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9299 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9299)
	}
}

func (x *stringUint64T) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "S":
			x.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "U":
			x.U = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *stringUint64T) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.U = (uint64)(r.DecodeUint64())
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *stringUint64T) IsCodecEmpty() bool {
	return !(x.S != "" || x.U != 0 || false)
}

func (AnonInTestStruc) codecSelferViaCodecgen() {}
func (x *AnonInTestStruc) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(17)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.AS))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.AI64))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.AI16))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.AUi64))
			z.EncWriteArrayElem()
			if x.ASslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.ASslice, e)
			} // end block: if x.ASslice slice == nil
			z.EncWriteArrayElem()
			if x.AI64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AI64slice, e)
			} // end block: if x.AI64slice slice == nil
			z.EncWriteArrayElem()
			if x.AUi64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AUi64slice, e)
			} // end block: if x.AUi64slice slice == nil
			z.EncWriteArrayElem()
			if x.AF64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.AF64slice, e)
			} // end block: if x.AF64slice slice == nil
			z.EncWriteArrayElem()
			if x.AF32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat32V(x.AF32slice, e)
			} // end block: if x.AF32slice slice == nil
			z.EncWriteArrayElem()
			if x.AMSS == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.AMSS, e)
			} // end block: if x.AMSS map == nil
			z.EncWriteArrayElem()
			if x.AMSU64 == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AMSU64, e)
			} // end block: if x.AMSU64 map == nil
			z.EncWriteArrayElem()
			yy31 := &x.AI64arr8
			h.encArray8int64((*[8]int64)(yy31), e)
			z.EncWriteArrayElem()
			yy33 := &x.AI64arr0
			h.encArray0int64((*[0]int64)(yy33), e)
			z.EncWriteArrayElem()
			if x.AI64slice0 == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AI64slice0, e)
			} // end block: if x.AI64slice0 slice == nil
			z.EncWriteArrayElem()
			if x.AUi64sliceN == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AUi64sliceN, e)
			} // end block: if x.AUi64sliceN slice == nil
			z.EncWriteArrayElem()
			if x.AMSU64N == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AMSU64N, e)
			} // end block: if x.AMSU64N map == nil
			z.EncWriteArrayElem()
			if x.AMSU64E == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AMSU64E, e)
			} // end block: if x.AMSU64E map == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(17)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AS\"")
			} else {
				r.EncodeString(`AS`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.AS))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64\"")
			} else {
				r.EncodeString(`AI64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.AI64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI16\"")
			} else {
				r.EncodeString(`AI16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.AI16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64\"")
			} else {
				r.EncodeString(`AUi64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.AUi64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ASslice\"")
			} else {
				r.EncodeString(`ASslice`)
			}
			z.EncWriteMapElemValue()
			if x.ASslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.ASslice, e)
			} // end block: if x.ASslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64slice\"")
			} else {
				r.EncodeString(`AI64slice`)
			}
			z.EncWriteMapElemValue()
			if x.AI64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AI64slice, e)
			} // end block: if x.AI64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64slice\"")
			} else {
				r.EncodeString(`AUi64slice`)
			}
			z.EncWriteMapElemValue()
			if x.AUi64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AUi64slice, e)
			} // end block: if x.AUi64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AF64slice\"")
			} else {
				r.EncodeString(`AF64slice`)
			}
			z.EncWriteMapElemValue()
			if x.AF64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.AF64slice, e)
			} // end block: if x.AF64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AF32slice\"")
			} else {
				r.EncodeString(`AF32slice`)
			}
			z.EncWriteMapElemValue()
			if x.AF32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat32V(x.AF32slice, e)
			} // end block: if x.AF32slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSS\"")
			} else {
				r.EncodeString(`AMSS`)
			}
			z.EncWriteMapElemValue()
			if x.AMSS == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.AMSS, e)
			} // end block: if x.AMSS map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64\"")
			} else {
				r.EncodeString(`AMSU64`)
			}
			z.EncWriteMapElemValue()
			if x.AMSU64 == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AMSU64, e)
			} // end block: if x.AMSU64 map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64arr8\"")
			} else {
				r.EncodeString(`AI64arr8`)
			}
			z.EncWriteMapElemValue()
			yy50 := &x.AI64arr8
			h.encArray8int64((*[8]int64)(yy50), e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64arr0\"")
			} else {
				r.EncodeString(`AI64arr0`)
			}
			z.EncWriteMapElemValue()
			yy52 := &x.AI64arr0
			h.encArray0int64((*[0]int64)(yy52), e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64slice0\"")
			} else {
				r.EncodeString(`AI64slice0`)
			}
			z.EncWriteMapElemValue()
			if x.AI64slice0 == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AI64slice0, e)
			} // end block: if x.AI64slice0 slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64sliceN\"")
			} else {
				r.EncodeString(`AUi64sliceN`)
			}
			z.EncWriteMapElemValue()
			if x.AUi64sliceN == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AUi64sliceN, e)
			} // end block: if x.AUi64sliceN slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64N\"")
			} else {
				r.EncodeString(`AMSU64N`)
			}
			z.EncWriteMapElemValue()
			if x.AMSU64N == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AMSU64N, e)
			} // end block: if x.AMSU64N map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64E\"")
			} else {
				r.EncodeString(`AMSU64E`)
			}
			z.EncWriteMapElemValue()
			if x.AMSU64E == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AMSU64E, e)
			} // end block: if x.AMSU64E map == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *AnonInTestStruc) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9299 {
		*(x) = AnonInTestStruc{}
	} else if yyct2 == codecSelferValueTypeMap9299 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9299 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9299)
	}
}

func (x *AnonInTestStruc) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "AS":
			x.AS = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "AI64":
			x.AI64 = (int64)(r.DecodeInt64())
		case "AI16":
			x.AI16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "AUi64":
			x.AUi64 = (uint64)(r.DecodeUint64())
		case "ASslice":
			z.F.DecSliceStringX(&x.ASslice, d)
		case "AI64slice":
			z.F.DecSliceInt64X(&x.AI64slice, d)
		case "AUi64slice":
			z.F.DecSliceUint64X(&x.AUi64slice, d)
		case "AF64slice":
			z.F.DecSliceFloat64X(&x.AF64slice, d)
		case "AF32slice":
			z.F.DecSliceFloat32X(&x.AF32slice, d)
		case "AMSS":
			z.F.DecMapStringStringX(&x.AMSS, d)
		case "AMSU64":
			z.F.DecMapStringUint64X(&x.AMSU64, d)
		case "AI64arr8":
			h.decArray8int64((*[8]int64)(&x.AI64arr8), d)
		case "AI64arr0":
			h.decArray0int64((*[0]int64)(&x.AI64arr0), d)
		case "AI64slice0":
			z.F.DecSliceInt64X(&x.AI64slice0, d)
		case "AUi64sliceN":
			z.F.DecSliceUint64X(&x.AUi64sliceN, d)
		case "AMSU64N":
			z.F.DecMapStringUint64X(&x.AMSU64N, d)
		case "AMSU64E":
			z.F.DecMapStringUint64X(&x.AMSU64E, d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *AnonInTestStruc) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj34 int
	var yyb34 bool
	var yyhl34 bool = l >= 0
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AS = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AI64 = (int64)(r.DecodeInt64())
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AI16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AUi64 = (uint64)(r.DecodeUint64())
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.ASslice, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.AI64slice, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.AUi64slice, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceFloat64X(&x.AF64slice, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceFloat32X(&x.AF32slice, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.AMSS, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.AMSU64, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray8int64((*[8]int64)(&x.AI64arr8), d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray0int64((*[0]int64)(&x.AI64arr0), d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.AI64slice0, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.AUi64sliceN, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.AMSU64N, d)
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = z.DecCheckBreak()
	}
	if yyb34 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.AMSU64E, d)
	for {
		yyj34++
		if yyhl34 {
			yyb34 = yyj34 > l
		} else {
			yyb34 = z.DecCheckBreak()
		}
		if yyb34 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj34-1, "")
	}
}

func (x *AnonInTestStruc) IsCodecEmpty() bool {
	return !(x.AS != "" || x.AI64 != 0 || x.AI16 != 0 || x.AUi64 != 0 || len(x.ASslice) != 0 || len(x.AI64slice) != 0 || len(x.AUi64slice) != 0 || len(x.AF64slice) != 0 || len(x.AF32slice) != 0 || len(x.AMSS) != 0 || len(x.AMSU64) != 0 || len(x.AI64arr8) != 0 || len(x.AI64arr0) != 0 || len(x.AI64slice0) != 0 || len(x.AUi64sliceN) != 0 || len(x.AMSU64N) != 0 || len(x.AMSU64E) != 0 || false)
}

func (testSimpleFields) codecSelferViaCodecgen() {}
func (x *testSimpleFields) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(17)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.S))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I64))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I8))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Ui64))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Ui8))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.F64))
			z.EncWriteArrayElem()
			r.EncodeFloat32(float32(x.F32))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.B))
			z.EncWriteArrayElem()
			if x.Sslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Sslice, e)
			} // end block: if x.Sslice slice == nil
			z.EncWriteArrayElem()
			if x.I32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt32V(x.I32slice, e)
			} // end block: if x.I32slice slice == nil
			z.EncWriteArrayElem()
			if x.Ui64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.Ui64slice, e)
			} // end block: if x.Ui64slice slice == nil
			z.EncWriteArrayElem()
			if x.Ui8slice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Ui8slice))
			} // end block: if x.Ui8slice slice == nil
			z.EncWriteArrayElem()
			if x.Bslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBoolV(x.Bslice, e)
			} // end block: if x.Bslice slice == nil
			z.EncWriteArrayElem()
			if x.Iptrslice == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoint64(([]*int64)(x.Iptrslice), e)
			} // end block: if x.Iptrslice slice == nil
			z.EncWriteArrayElem()
			if yyxt34 := z.Extension(x.WrapSliceInt64); yyxt34 != nil {
				z.EncExtension(x.WrapSliceInt64, yyxt34)
			} else {
				x.WrapSliceInt64.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if yyxt35 := z.Extension(x.WrapSliceString); yyxt35 != nil {
				z.EncExtension(x.WrapSliceString, yyxt35)
			} else {
				x.WrapSliceString.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.Msint == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringIntV(x.Msint, e)
			} // end block: if x.Msint map == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(17)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"S\"")
			} else {
				r.EncodeString(`S`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.S))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64\"")
			} else {
				r.EncodeString(`I64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I8\"")
			} else {
				r.EncodeString(`I8`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I8))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui64\"")
			} else {
				r.EncodeString(`Ui64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Ui64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui8\"")
			} else {
				r.EncodeString(`Ui8`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Ui8))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"F64\"")
			} else {
				r.EncodeString(`F64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.F64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"F32\"")
			} else {
				r.EncodeString(`F32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat32(float32(x.F32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"B\"")
			} else {
				r.EncodeString(`B`)
			}
			z.EncWriteMapElemValue()
			r.EncodeBool(bool(x.B))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Sslice\"")
			} else {
				r.EncodeString(`Sslice`)
			}
			z.EncWriteMapElemValue()
			if x.Sslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Sslice, e)
			} // end block: if x.Sslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32slice\"")
			} else {
				r.EncodeString(`I32slice`)
			}
			z.EncWriteMapElemValue()
			if x.I32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt32V(x.I32slice, e)
			} // end block: if x.I32slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui64slice\"")
			} else {
				r.EncodeString(`Ui64slice`)
			}
			z.EncWriteMapElemValue()
			if x.Ui64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.Ui64slice, e)
			} // end block: if x.Ui64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui8slice\"")
			} else {
				r.EncodeString(`Ui8slice`)
			}
			z.EncWriteMapElemValue()
			if x.Ui8slice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Ui8slice))
			} // end block: if x.Ui8slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Bslice\"")
			} else {
				r.EncodeString(`Bslice`)
			}
			z.EncWriteMapElemValue()
			if x.Bslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBoolV(x.Bslice, e)
			} // end block: if x.Bslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Iptrslice\"")
			} else {
				r.EncodeString(`Iptrslice`)
			}
			z.EncWriteMapElemValue()
			if x.Iptrslice == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoint64(([]*int64)(x.Iptrslice), e)
			} // end block: if x.Iptrslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"WrapSliceInt64\"")
			} else {
				r.EncodeString(`WrapSliceInt64`)
			}
			z.EncWriteMapElemValue()
			if yyxt51 := z.Extension(x.WrapSliceInt64); yyxt51 != nil {
				z.EncExtension(x.WrapSliceInt64, yyxt51)
			} else {
				x.WrapSliceInt64.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"WrapSliceString\"")
			} else {
				r.EncodeString(`WrapSliceString`)
			}
			z.EncWriteMapElemValue()
			if yyxt52 := z.Extension(x.WrapSliceString); yyxt52 != nil {
				z.EncExtension(x.WrapSliceString, yyxt52)
			} else {
				x.WrapSliceString.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Msint\"")
			} else {
				r.EncodeString(`Msint`)
			}
			z.EncWriteMapElemValue()
			if x.Msint == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringIntV(x.Msint, e)
			} // end block: if x.Msint map == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *testSimpleFields) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9299 {
		*(x) = testSimpleFields{}
	} else if yyct2 == codecSelferValueTypeMap9299 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9299 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9299)
	}
}

func (x *testSimpleFields) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "S":
			x.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "I64":
			x.I64 = (int64)(r.DecodeInt64())
		case "I8":
			x.I8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
		case "Ui64":
			x.Ui64 = (uint64)(r.DecodeUint64())
		case "Ui8":
			x.Ui8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		case "F64":
			x.F64 = (float64)(r.DecodeFloat64())
		case "F32":
			x.F32 = (float32)(z.DecDecodeFloat32())
		case "B":
			x.B = (bool)(r.DecodeBool())
		case "Sslice":
			z.F.DecSliceStringX(&x.Sslice, d)
		case "I32slice":
			z.F.DecSliceInt32X(&x.I32slice, d)
		case "Ui64slice":
			z.F.DecSliceUint64X(&x.Ui64slice, d)
		case "Ui8slice":
			x.Ui8slice = z.DecodeBytesInto(([]byte)(x.Ui8slice))
		case "Bslice":
			z.F.DecSliceBoolX(&x.Bslice, d)
		case "Iptrslice":
			h.decSlicePtrtoint64((*[]*int64)(&x.Iptrslice), d)
		case "WrapSliceInt64":
			if yyxt25 := z.Extension(x.WrapSliceInt64); yyxt25 != nil {
				z.DecExtension(&x.WrapSliceInt64, yyxt25)
			} else {
				x.WrapSliceInt64.CodecDecodeSelf(d)
			}
		case "WrapSliceString":
			if yyxt27 := z.Extension(x.WrapSliceString); yyxt27 != nil {
				z.DecExtension(&x.WrapSliceString, yyxt27)
			} else {
				x.WrapSliceString.CodecDecodeSelf(d)
			}
		case "Msint":
			z.F.DecMapStringIntX(&x.Msint, d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *testSimpleFields) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I64 = (int64)(r.DecodeInt64())
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui64 = (uint64)(r.DecodeUint64())
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.F64 = (float64)(r.DecodeFloat64())
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.F32 = (float32)(z.DecDecodeFloat32())
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.B = (bool)(r.DecodeBool())
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Sslice, d)
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt32X(&x.I32slice, d)
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.Ui64slice, d)
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui8slice = z.DecodeBytesInto(([]byte)(x.Ui8slice))
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceBoolX(&x.Bslice, d)
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoint64((*[]*int64)(&x.Iptrslice), d)
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt52 := z.Extension(x.WrapSliceInt64); yyxt52 != nil {
		z.DecExtension(&x.WrapSliceInt64, yyxt52)
	} else {
		x.WrapSliceInt64.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt54 := z.Extension(x.WrapSliceString); yyxt54 != nil {
		z.DecExtension(&x.WrapSliceString, yyxt54)
	} else {
		x.WrapSliceString.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = z.DecCheckBreak()
	}
	if yyb30 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringIntX(&x.Msint, d)
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = z.DecCheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj30-1, "")
	}
}

func (x *testSimpleFields) IsCodecEmpty() bool {
	return !(x.S != "" || x.I64 != 0 || x.I8 != 0 || x.Ui64 != 0 || x.Ui8 != 0 || x.F64 != 0 || x.F32 != 0 || bool(x.B) || len(x.Sslice) != 0 || len(x.I32slice) != 0 || len(x.Ui64slice) != 0 || len(x.Ui8slice) != 0 || len(x.Bslice) != 0 || len(x.Iptrslice) != 0 || len(x.WrapSliceInt64) != 0 || len(x.WrapSliceString) != 0 || len(x.Msint) != 0 || false)
}

func (TestStrucCommon) codecSelferViaCodecgen() {}
func (x *TestStrucCommon) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyn56 bool = x.Nint64 == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(54)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.S))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I64))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I32))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I16))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I8))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I64n))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I32n))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I16n))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.I8n))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Ui64))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Ui32))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Ui16))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Ui8))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.F64))
			z.EncWriteArrayElem()
			r.EncodeFloat32(float32(x.F32))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.B))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.By))
			z.EncWriteArrayElem()
			if x.Sslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Sslice, e)
			} // end block: if x.Sslice slice == nil
			z.EncWriteArrayElem()
			if x.I64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.I64slice, e)
			} // end block: if x.I64slice slice == nil
			z.EncWriteArrayElem()
			if x.I32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt32V(x.I32slice, e)
			} // end block: if x.I32slice slice == nil
			z.EncWriteArrayElem()
			if x.Ui64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.Ui64slice, e)
			} // end block: if x.Ui64slice slice == nil
			z.EncWriteArrayElem()
			if x.Ui8slice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Ui8slice))
			} // end block: if x.Ui8slice slice == nil
			z.EncWriteArrayElem()
			if x.Bslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBoolV(x.Bslice, e)
			} // end block: if x.Bslice slice == nil
			z.EncWriteArrayElem()
			if x.Byslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Byslice))
			} // end block: if x.Byslice slice == nil
			z.EncWriteArrayElem()
			if x.BytesSlice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBytesV(x.BytesSlice, e)
			} // end block: if x.BytesSlice slice == nil
			z.EncWriteArrayElem()
			if x.Iptrslice == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoint64(([]*int64)(x.Iptrslice), e)
			} // end block: if x.Iptrslice slice == nil
			z.EncWriteArrayElem()
			if yyxt83 := z.Extension(x.WrapSliceInt64); yyxt83 != nil {
				z.EncExtension(x.WrapSliceInt64, yyxt83)
			} else {
				x.WrapSliceInt64.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if yyxt84 := z.Extension(x.WrapSliceString); yyxt84 != nil {
				z.EncExtension(x.WrapSliceString, yyxt84)
			} else {
				x.WrapSliceString.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.Msint == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringIntV(x.Msint, e)
			} // end block: if x.Msint map == nil
			z.EncWriteArrayElem()
			if x.Msbytes == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBytesV(x.Msbytes, e)
			} // end block: if x.Msbytes map == nil
			z.EncWriteArrayElem()
			yy87 := &x.Simplef
			if yyxt88 := z.Extension(yy87); yyxt88 != nil {
				z.EncExtension(yy87, yyxt88)
			} else {
				yy87.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.SstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encSlicestringUint64T(([]stringUint64T)(x.SstrUi64T), e)
			} // end block: if x.SstrUi64T slice == nil
			z.EncWriteArrayElem()
			if x.MstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encMapstringPtrtostringUint64T((map[string]*stringUint64T)(x.MstrUi64T), e)
			} // end block: if x.MstrUi64T map == nil
			z.EncWriteArrayElem()
			r.EncodeString(string(x.AnonInTestStruc.AS))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.AnonInTestStruc.AI64))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.AnonInTestStruc.AI16))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.AnonInTestStruc.AUi64))
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.ASslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.AnonInTestStruc.ASslice, e)
			} // end block: if x.AnonInTestStruc.ASslice slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AI64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AnonInTestStruc.AI64slice, e)
			} // end block: if x.AnonInTestStruc.AI64slice slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AUi64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AnonInTestStruc.AUi64slice, e)
			} // end block: if x.AnonInTestStruc.AUi64slice slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AF64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.AnonInTestStruc.AF64slice, e)
			} // end block: if x.AnonInTestStruc.AF64slice slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AF32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat32V(x.AnonInTestStruc.AF32slice, e)
			} // end block: if x.AnonInTestStruc.AF32slice slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AMSS == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.AnonInTestStruc.AMSS, e)
			} // end block: if x.AnonInTestStruc.AMSS map == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AMSU64 == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AnonInTestStruc.AMSU64, e)
			} // end block: if x.AnonInTestStruc.AMSU64 map == nil
			z.EncWriteArrayElem()
			yy102 := &x.AnonInTestStruc.AI64arr8
			h.encArray8int64((*[8]int64)(yy102), e)
			z.EncWriteArrayElem()
			yy104 := &x.AnonInTestStruc.AI64arr0
			h.encArray0int64((*[0]int64)(yy104), e)
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AI64slice0 == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AnonInTestStruc.AI64slice0, e)
			} // end block: if x.AnonInTestStruc.AI64slice0 slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AUi64sliceN == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AnonInTestStruc.AUi64sliceN, e)
			} // end block: if x.AnonInTestStruc.AUi64sliceN slice == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AMSU64N == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AnonInTestStruc.AMSU64N, e)
			} // end block: if x.AnonInTestStruc.AMSU64N map == nil
			z.EncWriteArrayElem()
			if x.AnonInTestStruc.AMSU64E == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AnonInTestStruc.AMSU64E, e)
			} // end block: if x.AnonInTestStruc.AMSU64E map == nil
			z.EncWriteArrayElem()
			yy110 := &x.NotAnon
			if yyxt111 := z.Extension(yy110); yyxt111 != nil {
				z.EncExtension(yy110, yyxt111)
			} else {
				yy110.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.Nmap == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBoolV(x.Nmap, e)
			} // end block: if x.Nmap map == nil
			z.EncWriteArrayElem()
			if x.Nslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Nslice))
			} // end block: if x.Nslice slice == nil
			if yyn56 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy114 := *x.Nint64
				r.EncodeInt(int64(yy114))
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(54)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"S\"")
			} else {
				r.EncodeString(`S`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.S))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64\"")
			} else {
				r.EncodeString(`I64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32\"")
			} else {
				r.EncodeString(`I32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I16\"")
			} else {
				r.EncodeString(`I16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I8\"")
			} else {
				r.EncodeString(`I8`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I8))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64n\"")
			} else {
				r.EncodeString(`I64n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I64n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32n\"")
			} else {
				r.EncodeString(`I32n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I32n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I16n\"")
			} else {
				r.EncodeString(`I16n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I16n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I8n\"")
			} else {
				r.EncodeString(`I8n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.I8n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui64\"")
			} else {
				r.EncodeString(`Ui64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Ui64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui32\"")
			} else {
				r.EncodeString(`Ui32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Ui32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui16\"")
			} else {
				r.EncodeString(`Ui16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Ui16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui8\"")
			} else {
				r.EncodeString(`Ui8`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Ui8))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"F64\"")
			} else {
				r.EncodeString(`F64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.F64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"F32\"")
			} else {
				r.EncodeString(`F32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat32(float32(x.F32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"B\"")
			} else {
				r.EncodeString(`B`)
			}
			z.EncWriteMapElemValue()
			r.EncodeBool(bool(x.B))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"By\"")
			} else {
				r.EncodeString(`By`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.By))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Sslice\"")
			} else {
				r.EncodeString(`Sslice`)
			}
			z.EncWriteMapElemValue()
			if x.Sslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Sslice, e)
			} // end block: if x.Sslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64slice\"")
			} else {
				r.EncodeString(`I64slice`)
			}
			z.EncWriteMapElemValue()
			if x.I64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.I64slice, e)
			} // end block: if x.I64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32slice\"")
			} else {
				r.EncodeString(`I32slice`)
			}
			z.EncWriteMapElemValue()
			if x.I32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt32V(x.I32slice, e)
			} // end block: if x.I32slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui64slice\"")
			} else {
				r.EncodeString(`Ui64slice`)
			}
			z.EncWriteMapElemValue()
			if x.Ui64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.Ui64slice, e)
			} // end block: if x.Ui64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui8slice\"")
			} else {
				r.EncodeString(`Ui8slice`)
			}
			z.EncWriteMapElemValue()
			if x.Ui8slice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Ui8slice))
			} // end block: if x.Ui8slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Bslice\"")
			} else {
				r.EncodeString(`Bslice`)
			}
			z.EncWriteMapElemValue()
			if x.Bslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBoolV(x.Bslice, e)
			} // end block: if x.Bslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Byslice\"")
			} else {
				r.EncodeString(`Byslice`)
			}
			z.EncWriteMapElemValue()
			if x.Byslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Byslice))
			} // end block: if x.Byslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"BytesSlice\"")
			} else {
				r.EncodeString(`BytesSlice`)
			}
			z.EncWriteMapElemValue()
			if x.BytesSlice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBytesV(x.BytesSlice, e)
			} // end block: if x.BytesSlice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Iptrslice\"")
			} else {
				r.EncodeString(`Iptrslice`)
			}
			z.EncWriteMapElemValue()
			if x.Iptrslice == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoint64(([]*int64)(x.Iptrslice), e)
			} // end block: if x.Iptrslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"WrapSliceInt64\"")
			} else {
				r.EncodeString(`WrapSliceInt64`)
			}
			z.EncWriteMapElemValue()
			if yyxt142 := z.Extension(x.WrapSliceInt64); yyxt142 != nil {
				z.EncExtension(x.WrapSliceInt64, yyxt142)
			} else {
				x.WrapSliceInt64.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"WrapSliceString\"")
			} else {
				r.EncodeString(`WrapSliceString`)
			}
			z.EncWriteMapElemValue()
			if yyxt143 := z.Extension(x.WrapSliceString); yyxt143 != nil {
				z.EncExtension(x.WrapSliceString, yyxt143)
			} else {
				x.WrapSliceString.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Msint\"")
			} else {
				r.EncodeString(`Msint`)
			}
			z.EncWriteMapElemValue()
			if x.Msint == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringIntV(x.Msint, e)
			} // end block: if x.Msint map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Msbytes\"")
			} else {
				r.EncodeString(`Msbytes`)
			}
			z.EncWriteMapElemValue()
			if x.Msbytes == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBytesV(x.Msbytes, e)
			} // end block: if x.Msbytes map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Simplef\"")
			} else {
				r.EncodeString(`Simplef`)
			}
			z.EncWriteMapElemValue()
			yy146 := &x.Simplef
			if yyxt147 := z.Extension(yy146); yyxt147 != nil {
				z.EncExtension(yy146, yyxt147)
			} else {
				yy146.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"SstrUi64T\"")
			} else {
				r.EncodeString(`SstrUi64T`)
			}
			z.EncWriteMapElemValue()
			if x.SstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encSlicestringUint64T(([]stringUint64T)(x.SstrUi64T), e)
			} // end block: if x.SstrUi64T slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"MstrUi64T\"")
			} else {
				r.EncodeString(`MstrUi64T`)
			}
			z.EncWriteMapElemValue()
			if x.MstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encMapstringPtrtostringUint64T((map[string]*stringUint64T)(x.MstrUi64T), e)
			} // end block: if x.MstrUi64T map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AS\"")
			} else {
				r.EncodeString(`AS`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.AnonInTestStruc.AS))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64\"")
			} else {
				r.EncodeString(`AI64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.AnonInTestStruc.AI64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI16\"")
			} else {
				r.EncodeString(`AI16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.AnonInTestStruc.AI16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64\"")
			} else {
				r.EncodeString(`AUi64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.AnonInTestStruc.AUi64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ASslice\"")
			} else {
				r.EncodeString(`ASslice`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.ASslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.AnonInTestStruc.ASslice, e)
			} // end block: if x.AnonInTestStruc.ASslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64slice\"")
			} else {
				r.EncodeString(`AI64slice`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AI64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AnonInTestStruc.AI64slice, e)
			} // end block: if x.AnonInTestStruc.AI64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64slice\"")
			} else {
				r.EncodeString(`AUi64slice`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AUi64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AnonInTestStruc.AUi64slice, e)
			} // end block: if x.AnonInTestStruc.AUi64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AF64slice\"")
			} else {
				r.EncodeString(`AF64slice`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AF64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.AnonInTestStruc.AF64slice, e)
			} // end block: if x.AnonInTestStruc.AF64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AF32slice\"")
			} else {
				r.EncodeString(`AF32slice`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AF32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat32V(x.AnonInTestStruc.AF32slice, e)
			} // end block: if x.AnonInTestStruc.AF32slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSS\"")
			} else {
				r.EncodeString(`AMSS`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AMSS == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.AnonInTestStruc.AMSS, e)
			} // end block: if x.AnonInTestStruc.AMSS map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64\"")
			} else {
				r.EncodeString(`AMSU64`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AMSU64 == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AnonInTestStruc.AMSU64, e)
			} // end block: if x.AnonInTestStruc.AMSU64 map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64arr8\"")
			} else {
				r.EncodeString(`AI64arr8`)
			}
			z.EncWriteMapElemValue()
			yy161 := &x.AnonInTestStruc.AI64arr8
			h.encArray8int64((*[8]int64)(yy161), e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64arr0\"")
			} else {
				r.EncodeString(`AI64arr0`)
			}
			z.EncWriteMapElemValue()
			yy163 := &x.AnonInTestStruc.AI64arr0
			h.encArray0int64((*[0]int64)(yy163), e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64slice0\"")
			} else {
				r.EncodeString(`AI64slice0`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AI64slice0 == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.AnonInTestStruc.AI64slice0, e)
			} // end block: if x.AnonInTestStruc.AI64slice0 slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64sliceN\"")
			} else {
				r.EncodeString(`AUi64sliceN`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AUi64sliceN == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.AnonInTestStruc.AUi64sliceN, e)
			} // end block: if x.AnonInTestStruc.AUi64sliceN slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64N\"")
			} else {
				r.EncodeString(`AMSU64N`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AMSU64N == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AnonInTestStruc.AMSU64N, e)
			} // end block: if x.AnonInTestStruc.AMSU64N map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64E\"")
			} else {
				r.EncodeString(`AMSU64E`)
			}
			z.EncWriteMapElemValue()
			if x.AnonInTestStruc.AMSU64E == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.AnonInTestStruc.AMSU64E, e)
			} // end block: if x.AnonInTestStruc.AMSU64E map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"NotAnon\"")
			} else {
				r.EncodeString(`NotAnon`)
			}
			z.EncWriteMapElemValue()
			yy169 := &x.NotAnon
			if yyxt170 := z.Extension(yy169); yyxt170 != nil {
				z.EncExtension(yy169, yyxt170)
			} else {
				yy169.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nmap\"")
			} else {
				r.EncodeString(`Nmap`)
			}
			z.EncWriteMapElemValue()
			if x.Nmap == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBoolV(x.Nmap, e)
			} // end block: if x.Nmap map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nslice\"")
			} else {
				r.EncodeString(`Nslice`)
			}
			z.EncWriteMapElemValue()
			if x.Nslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Nslice))
			} // end block: if x.Nslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nint64\"")
			} else {
				r.EncodeString(`Nint64`)
			}
			z.EncWriteMapElemValue()
			if yyn56 {
				r.EncodeNil()
			} else {
				yy173 := *x.Nint64
				r.EncodeInt(int64(yy173))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *TestStrucCommon) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9299 {
		*(x) = TestStrucCommon{}
	} else if yyct2 == codecSelferValueTypeMap9299 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9299 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9299)
	}
}

func (x *TestStrucCommon) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "S":
			x.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "I64":
			x.I64 = (int64)(r.DecodeInt64())
		case "I32":
			x.I32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
		case "I16":
			x.I16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "I8":
			x.I8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
		case "I64n":
			x.I64n = (int64)(r.DecodeInt64())
		case "I32n":
			x.I32n = (int32)(z.C.IntV(r.DecodeInt64(), 32))
		case "I16n":
			x.I16n = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "I8n":
			x.I8n = (int8)(z.C.IntV(r.DecodeInt64(), 8))
		case "Ui64":
			x.Ui64 = (uint64)(r.DecodeUint64())
		case "Ui32":
			x.Ui32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		case "Ui16":
			x.Ui16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
		case "Ui8":
			x.Ui8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		case "F64":
			x.F64 = (float64)(r.DecodeFloat64())
		case "F32":
			x.F32 = (float32)(z.DecDecodeFloat32())
		case "B":
			x.B = (bool)(r.DecodeBool())
		case "By":
			x.By = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		case "Sslice":
			z.F.DecSliceStringX(&x.Sslice, d)
		case "I64slice":
			z.F.DecSliceInt64X(&x.I64slice, d)
		case "I32slice":
			z.F.DecSliceInt32X(&x.I32slice, d)
		case "Ui64slice":
			z.F.DecSliceUint64X(&x.Ui64slice, d)
		case "Ui8slice":
			x.Ui8slice = z.DecodeBytesInto(([]byte)(x.Ui8slice))
		case "Bslice":
			z.F.DecSliceBoolX(&x.Bslice, d)
		case "Byslice":
			x.Byslice = z.DecodeBytesInto(([]byte)(x.Byslice))
		case "BytesSlice":
			z.F.DecSliceBytesX(&x.BytesSlice, d)
		case "Iptrslice":
			h.decSlicePtrtoint64((*[]*int64)(&x.Iptrslice), d)
		case "WrapSliceInt64":
			if yyxt40 := z.Extension(x.WrapSliceInt64); yyxt40 != nil {
				z.DecExtension(&x.WrapSliceInt64, yyxt40)
			} else {
				x.WrapSliceInt64.CodecDecodeSelf(d)
			}
		case "WrapSliceString":
			if yyxt42 := z.Extension(x.WrapSliceString); yyxt42 != nil {
				z.DecExtension(&x.WrapSliceString, yyxt42)
			} else {
				x.WrapSliceString.CodecDecodeSelf(d)
			}
		case "Msint":
			z.F.DecMapStringIntX(&x.Msint, d)
		case "Msbytes":
			z.F.DecMapStringBytesX(&x.Msbytes, d)
		case "Simplef":
			if yyxt48 := z.Extension(x.Simplef); yyxt48 != nil {
				z.DecExtension(&x.Simplef, yyxt48)
			} else {
				x.Simplef.CodecDecodeSelf(d)
			}
		case "SstrUi64T":
			h.decSlicestringUint64T((*[]stringUint64T)(&x.SstrUi64T), d)
		case "MstrUi64T":
			h.decMapstringPtrtostringUint64T((*map[string]*stringUint64T)(&x.MstrUi64T), d)
		case "AS":
			x.AnonInTestStruc.AS = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "AI64":
			x.AnonInTestStruc.AI64 = (int64)(r.DecodeInt64())
		case "AI16":
			x.AnonInTestStruc.AI16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "AUi64":
			x.AnonInTestStruc.AUi64 = (uint64)(r.DecodeUint64())
		case "ASslice":
			z.F.DecSliceStringX(&x.AnonInTestStruc.ASslice, d)
		case "AI64slice":
			z.F.DecSliceInt64X(&x.AnonInTestStruc.AI64slice, d)
		case "AUi64slice":
			z.F.DecSliceUint64X(&x.AnonInTestStruc.AUi64slice, d)
		case "AF64slice":
			z.F.DecSliceFloat64X(&x.AnonInTestStruc.AF64slice, d)
		case "AF32slice":
			z.F.DecSliceFloat32X(&x.AnonInTestStruc.AF32slice, d)
		case "AMSS":
			z.F.DecMapStringStringX(&x.AnonInTestStruc.AMSS, d)
		case "AMSU64":
			z.F.DecMapStringUint64X(&x.AnonInTestStruc.AMSU64, d)
		case "AI64arr8":
			h.decArray8int64((*[8]int64)(&x.AnonInTestStruc.AI64arr8), d)
		case "AI64arr0":
			h.decArray0int64((*[0]int64)(&x.AnonInTestStruc.AI64arr0), d)
		case "AI64slice0":
			z.F.DecSliceInt64X(&x.AnonInTestStruc.AI64slice0, d)
		case "AUi64sliceN":
			z.F.DecSliceUint64X(&x.AnonInTestStruc.AUi64sliceN, d)
		case "AMSU64N":
			z.F.DecMapStringUint64X(&x.AnonInTestStruc.AMSU64N, d)
		case "AMSU64E":
			z.F.DecMapStringUint64X(&x.AnonInTestStruc.AMSU64E, d)
		case "NotAnon":
			if yyxt84 := z.Extension(x.NotAnon); yyxt84 != nil {
				z.DecExtension(&x.NotAnon, yyxt84)
			} else {
				x.NotAnon.CodecDecodeSelf(d)
			}
		case "Nmap":
			z.F.DecMapStringBoolX(&x.Nmap, d)
		case "Nslice":
			x.Nslice = z.DecodeBytesInto(([]byte)(x.Nslice))
		case "Nint64":
			if r.TryNil() {
				if x.Nint64 != nil { // remove the if-true
					x.Nint64 = nil
				}
			} else {
				if x.Nint64 == nil {
					x.Nint64 = new(int64)
				}
				*x.Nint64 = (int64)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *TestStrucCommon) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj91 int
	var yyb91 bool
	var yyhl91 bool = l >= 0
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I64 = (int64)(r.DecodeInt64())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I64n = (int64)(r.DecodeInt64())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I32n = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I16n = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.I8n = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui64 = (uint64)(r.DecodeUint64())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.F64 = (float64)(r.DecodeFloat64())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.F32 = (float32)(z.DecDecodeFloat32())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.B = (bool)(r.DecodeBool())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.By = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Sslice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.I64slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt32X(&x.I32slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.Ui64slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Ui8slice = z.DecodeBytesInto(([]byte)(x.Ui8slice))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceBoolX(&x.Bslice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Byslice = z.DecodeBytesInto(([]byte)(x.Byslice))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceBytesX(&x.BytesSlice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoint64((*[]*int64)(&x.Iptrslice), d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt128 := z.Extension(x.WrapSliceInt64); yyxt128 != nil {
		z.DecExtension(&x.WrapSliceInt64, yyxt128)
	} else {
		x.WrapSliceInt64.CodecDecodeSelf(d)
	}
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt130 := z.Extension(x.WrapSliceString); yyxt130 != nil {
		z.DecExtension(&x.WrapSliceString, yyxt130)
	} else {
		x.WrapSliceString.CodecDecodeSelf(d)
	}
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringIntX(&x.Msint, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringBytesX(&x.Msbytes, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt136 := z.Extension(x.Simplef); yyxt136 != nil {
		z.DecExtension(&x.Simplef, yyxt136)
	} else {
		x.Simplef.CodecDecodeSelf(d)
	}
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicestringUint64T((*[]stringUint64T)(&x.SstrUi64T), d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decMapstringPtrtostringUint64T((*map[string]*stringUint64T)(&x.MstrUi64T), d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AnonInTestStruc.AS = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AnonInTestStruc.AI64 = (int64)(r.DecodeInt64())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AnonInTestStruc.AI16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.AnonInTestStruc.AUi64 = (uint64)(r.DecodeUint64())
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.AnonInTestStruc.ASslice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.AnonInTestStruc.AI64slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.AnonInTestStruc.AUi64slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceFloat64X(&x.AnonInTestStruc.AF64slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceFloat32X(&x.AnonInTestStruc.AF32slice, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.AnonInTestStruc.AMSS, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.AnonInTestStruc.AMSU64, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray8int64((*[8]int64)(&x.AnonInTestStruc.AI64arr8), d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray0int64((*[0]int64)(&x.AnonInTestStruc.AI64arr0), d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.AnonInTestStruc.AI64slice0, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.AnonInTestStruc.AUi64sliceN, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.AnonInTestStruc.AMSU64N, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.AnonInTestStruc.AMSU64E, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt172 := z.Extension(x.NotAnon); yyxt172 != nil {
		z.DecExtension(&x.NotAnon, yyxt172)
	} else {
		x.NotAnon.CodecDecodeSelf(d)
	}
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringBoolX(&x.Nmap, d)
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Nslice = z.DecodeBytesInto(([]byte)(x.Nslice))
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = z.DecCheckBreak()
	}
	if yyb91 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Nint64 != nil { // remove the if-true
			x.Nint64 = nil
		}
	} else {
		if x.Nint64 == nil {
			x.Nint64 = new(int64)
		}
		*x.Nint64 = (int64)(r.DecodeInt64())
	}
	for {
		yyj91++
		if yyhl91 {
			yyb91 = yyj91 > l
		} else {
			yyb91 = z.DecCheckBreak()
		}
		if yyb91 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj91-1, "")
	}
}

func (x *TestStrucCommon) IsCodecEmpty() bool {
	return !(x.S != "" || x.I64 != 0 || x.I32 != 0 || x.I16 != 0 || x.I8 != 0 || x.I64n != 0 || x.I32n != 0 || x.I16n != 0 || x.I8n != 0 || x.Ui64 != 0 || x.Ui32 != 0 || x.Ui16 != 0 || x.Ui8 != 0 || x.F64 != 0 || x.F32 != 0 || bool(x.B) || x.By != 0 || len(x.Sslice) != 0 || len(x.I64slice) != 0 || len(x.I32slice) != 0 || len(x.Ui64slice) != 0 || len(x.Ui8slice) != 0 || len(x.Bslice) != 0 || len(x.Byslice) != 0 || len(x.BytesSlice) != 0 || len(x.Iptrslice) != 0 || len(x.WrapSliceInt64) != 0 || len(x.WrapSliceString) != 0 || len(x.Msint) != 0 || len(x.Msbytes) != 0 || !(x.Simplef.IsCodecEmpty()) || len(x.SstrUi64T) != 0 || len(x.MstrUi64T) != 0 || !(x.AnonInTestStruc.IsCodecEmpty()) || !(x.NotAnon.IsCodecEmpty()) || len(x.Nmap) != 0 || len(x.Nslice) != 0 || false)
}

func (TestStruc) codecSelferViaCodecgen() {}
func (x *TestStruc) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyn56 bool = x.TestStrucCommon.Nint64 == nil
		var yyn60 bool = x.Nteststruc == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(58)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.TestStrucCommon.S))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I64))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I32))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I16))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I8))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I64n))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I32n))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I16n))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.I8n))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui64))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui32))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui16))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui8))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.TestStrucCommon.F64))
			z.EncWriteArrayElem()
			r.EncodeFloat32(float32(x.TestStrucCommon.F32))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.TestStrucCommon.B))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.TestStrucCommon.By))
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Sslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.TestStrucCommon.Sslice, e)
			} // end block: if x.TestStrucCommon.Sslice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.I64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.TestStrucCommon.I64slice, e)
			} // end block: if x.TestStrucCommon.I64slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.I32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt32V(x.TestStrucCommon.I32slice, e)
			} // end block: if x.TestStrucCommon.I32slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Ui64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.TestStrucCommon.Ui64slice, e)
			} // end block: if x.TestStrucCommon.Ui64slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Ui8slice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.TestStrucCommon.Ui8slice))
			} // end block: if x.TestStrucCommon.Ui8slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Bslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBoolV(x.TestStrucCommon.Bslice, e)
			} // end block: if x.TestStrucCommon.Bslice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Byslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.TestStrucCommon.Byslice))
			} // end block: if x.TestStrucCommon.Byslice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.BytesSlice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBytesV(x.TestStrucCommon.BytesSlice, e)
			} // end block: if x.TestStrucCommon.BytesSlice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Iptrslice == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoint64(([]*int64)(x.TestStrucCommon.Iptrslice), e)
			} // end block: if x.TestStrucCommon.Iptrslice slice == nil
			z.EncWriteArrayElem()
			if yyxt87 := z.Extension(x.TestStrucCommon.WrapSliceInt64); yyxt87 != nil {
				z.EncExtension(x.TestStrucCommon.WrapSliceInt64, yyxt87)
			} else {
				x.TestStrucCommon.WrapSliceInt64.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if yyxt88 := z.Extension(x.TestStrucCommon.WrapSliceString); yyxt88 != nil {
				z.EncExtension(x.TestStrucCommon.WrapSliceString, yyxt88)
			} else {
				x.TestStrucCommon.WrapSliceString.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Msint == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringIntV(x.TestStrucCommon.Msint, e)
			} // end block: if x.TestStrucCommon.Msint map == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Msbytes == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBytesV(x.TestStrucCommon.Msbytes, e)
			} // end block: if x.TestStrucCommon.Msbytes map == nil
			z.EncWriteArrayElem()
			yy91 := &x.TestStrucCommon.Simplef
			if yyxt92 := z.Extension(yy91); yyxt92 != nil {
				z.EncExtension(yy91, yyxt92)
			} else {
				yy91.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.TestStrucCommon.SstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encSlicestringUint64T(([]stringUint64T)(x.TestStrucCommon.SstrUi64T), e)
			} // end block: if x.TestStrucCommon.SstrUi64T slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.MstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encMapstringPtrtostringUint64T((map[string]*stringUint64T)(x.TestStrucCommon.MstrUi64T), e)
			} // end block: if x.TestStrucCommon.MstrUi64T map == nil
			z.EncWriteArrayElem()
			r.EncodeString(string(x.TestStrucCommon.AnonInTestStruc.AS))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.AnonInTestStruc.AI64))
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.TestStrucCommon.AnonInTestStruc.AI16))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.TestStrucCommon.AnonInTestStruc.AUi64))
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.ASslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.TestStrucCommon.AnonInTestStruc.ASslice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.ASslice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AI64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.TestStrucCommon.AnonInTestStruc.AI64slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AI64slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AUi64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.TestStrucCommon.AnonInTestStruc.AUi64slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AUi64slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AF64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.TestStrucCommon.AnonInTestStruc.AF64slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AF64slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AF32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat32V(x.TestStrucCommon.AnonInTestStruc.AF32slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AF32slice slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AMSS == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.TestStrucCommon.AnonInTestStruc.AMSS, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSS map == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AMSU64 == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.TestStrucCommon.AnonInTestStruc.AMSU64, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSU64 map == nil
			z.EncWriteArrayElem()
			yy106 := &x.TestStrucCommon.AnonInTestStruc.AI64arr8
			h.encArray8int64((*[8]int64)(yy106), e)
			z.EncWriteArrayElem()
			yy108 := &x.TestStrucCommon.AnonInTestStruc.AI64arr0
			h.encArray0int64((*[0]int64)(yy108), e)
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AI64slice0 == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.TestStrucCommon.AnonInTestStruc.AI64slice0, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AI64slice0 slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AUi64sliceN == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.TestStrucCommon.AnonInTestStruc.AUi64sliceN, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AUi64sliceN slice == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AMSU64N == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.TestStrucCommon.AnonInTestStruc.AMSU64N, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSU64N map == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.AnonInTestStruc.AMSU64E == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.TestStrucCommon.AnonInTestStruc.AMSU64E, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSU64E map == nil
			z.EncWriteArrayElem()
			yy114 := &x.TestStrucCommon.NotAnon
			if yyxt115 := z.Extension(yy114); yyxt115 != nil {
				z.EncExtension(yy114, yyxt115)
			} else {
				yy114.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Nmap == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBoolV(x.TestStrucCommon.Nmap, e)
			} // end block: if x.TestStrucCommon.Nmap map == nil
			z.EncWriteArrayElem()
			if x.TestStrucCommon.Nslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.TestStrucCommon.Nslice))
			} // end block: if x.TestStrucCommon.Nslice slice == nil
			if yyn56 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy118 := *x.TestStrucCommon.Nint64
				r.EncodeInt(int64(yy118))
			}
			z.EncWriteArrayElem()
			if x.Mtsptr == nil {
				r.EncodeNil()
			} else {
				h.encMapstringPtrtoTestStruc((map[string]*TestStruc)(x.Mtsptr), e)
			} // end block: if x.Mtsptr map == nil
			z.EncWriteArrayElem()
			if x.Mts == nil {
				r.EncodeNil()
			} else {
				h.encMapstringTestStruc((map[string]TestStruc)(x.Mts), e)
			} // end block: if x.Mts map == nil
			z.EncWriteArrayElem()
			if x.Its == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoTestStruc(([]*TestStruc)(x.Its), e)
			} // end block: if x.Its slice == nil
			if yyn60 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if yyxt123 := z.Extension(x.Nteststruc); yyxt123 != nil {
					z.EncExtension(x.Nteststruc, yyxt123)
				} else {
					x.Nteststruc.CodecEncodeSelf(e)
				}
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(58)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"S\"")
			} else {
				r.EncodeString(`S`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.TestStrucCommon.S))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64\"")
			} else {
				r.EncodeString(`I64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32\"")
			} else {
				r.EncodeString(`I32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I16\"")
			} else {
				r.EncodeString(`I16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I8\"")
			} else {
				r.EncodeString(`I8`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I8))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64n\"")
			} else {
				r.EncodeString(`I64n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I64n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32n\"")
			} else {
				r.EncodeString(`I32n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I32n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I16n\"")
			} else {
				r.EncodeString(`I16n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I16n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I8n\"")
			} else {
				r.EncodeString(`I8n`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.I8n))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui64\"")
			} else {
				r.EncodeString(`Ui64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui32\"")
			} else {
				r.EncodeString(`Ui32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui16\"")
			} else {
				r.EncodeString(`Ui16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui8\"")
			} else {
				r.EncodeString(`Ui8`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.TestStrucCommon.Ui8))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"F64\"")
			} else {
				r.EncodeString(`F64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.TestStrucCommon.F64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"F32\"")
			} else {
				r.EncodeString(`F32`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat32(float32(x.TestStrucCommon.F32))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"B\"")
			} else {
				r.EncodeString(`B`)
			}
			z.EncWriteMapElemValue()
			r.EncodeBool(bool(x.TestStrucCommon.B))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"By\"")
			} else {
				r.EncodeString(`By`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.TestStrucCommon.By))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Sslice\"")
			} else {
				r.EncodeString(`Sslice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Sslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.TestStrucCommon.Sslice, e)
			} // end block: if x.TestStrucCommon.Sslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I64slice\"")
			} else {
				r.EncodeString(`I64slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.I64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.TestStrucCommon.I64slice, e)
			} // end block: if x.TestStrucCommon.I64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"I32slice\"")
			} else {
				r.EncodeString(`I32slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.I32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt32V(x.TestStrucCommon.I32slice, e)
			} // end block: if x.TestStrucCommon.I32slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui64slice\"")
			} else {
				r.EncodeString(`Ui64slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Ui64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.TestStrucCommon.Ui64slice, e)
			} // end block: if x.TestStrucCommon.Ui64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Ui8slice\"")
			} else {
				r.EncodeString(`Ui8slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Ui8slice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.TestStrucCommon.Ui8slice))
			} // end block: if x.TestStrucCommon.Ui8slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Bslice\"")
			} else {
				r.EncodeString(`Bslice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Bslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBoolV(x.TestStrucCommon.Bslice, e)
			} // end block: if x.TestStrucCommon.Bslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Byslice\"")
			} else {
				r.EncodeString(`Byslice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Byslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.TestStrucCommon.Byslice))
			} // end block: if x.TestStrucCommon.Byslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"BytesSlice\"")
			} else {
				r.EncodeString(`BytesSlice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.BytesSlice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceBytesV(x.TestStrucCommon.BytesSlice, e)
			} // end block: if x.TestStrucCommon.BytesSlice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Iptrslice\"")
			} else {
				r.EncodeString(`Iptrslice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Iptrslice == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoint64(([]*int64)(x.TestStrucCommon.Iptrslice), e)
			} // end block: if x.TestStrucCommon.Iptrslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"WrapSliceInt64\"")
			} else {
				r.EncodeString(`WrapSliceInt64`)
			}
			z.EncWriteMapElemValue()
			if yyxt150 := z.Extension(x.TestStrucCommon.WrapSliceInt64); yyxt150 != nil {
				z.EncExtension(x.TestStrucCommon.WrapSliceInt64, yyxt150)
			} else {
				x.TestStrucCommon.WrapSliceInt64.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"WrapSliceString\"")
			} else {
				r.EncodeString(`WrapSliceString`)
			}
			z.EncWriteMapElemValue()
			if yyxt151 := z.Extension(x.TestStrucCommon.WrapSliceString); yyxt151 != nil {
				z.EncExtension(x.TestStrucCommon.WrapSliceString, yyxt151)
			} else {
				x.TestStrucCommon.WrapSliceString.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Msint\"")
			} else {
				r.EncodeString(`Msint`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Msint == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringIntV(x.TestStrucCommon.Msint, e)
			} // end block: if x.TestStrucCommon.Msint map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Msbytes\"")
			} else {
				r.EncodeString(`Msbytes`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Msbytes == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBytesV(x.TestStrucCommon.Msbytes, e)
			} // end block: if x.TestStrucCommon.Msbytes map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Simplef\"")
			} else {
				r.EncodeString(`Simplef`)
			}
			z.EncWriteMapElemValue()
			yy154 := &x.TestStrucCommon.Simplef
			if yyxt155 := z.Extension(yy154); yyxt155 != nil {
				z.EncExtension(yy154, yyxt155)
			} else {
				yy154.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"SstrUi64T\"")
			} else {
				r.EncodeString(`SstrUi64T`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.SstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encSlicestringUint64T(([]stringUint64T)(x.TestStrucCommon.SstrUi64T), e)
			} // end block: if x.TestStrucCommon.SstrUi64T slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"MstrUi64T\"")
			} else {
				r.EncodeString(`MstrUi64T`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.MstrUi64T == nil {
				r.EncodeNil()
			} else {
				h.encMapstringPtrtostringUint64T((map[string]*stringUint64T)(x.TestStrucCommon.MstrUi64T), e)
			} // end block: if x.TestStrucCommon.MstrUi64T map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AS\"")
			} else {
				r.EncodeString(`AS`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.TestStrucCommon.AnonInTestStruc.AS))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64\"")
			} else {
				r.EncodeString(`AI64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.AnonInTestStruc.AI64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI16\"")
			} else {
				r.EncodeString(`AI16`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.TestStrucCommon.AnonInTestStruc.AI16))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64\"")
			} else {
				r.EncodeString(`AUi64`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.TestStrucCommon.AnonInTestStruc.AUi64))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ASslice\"")
			} else {
				r.EncodeString(`ASslice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.ASslice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.TestStrucCommon.AnonInTestStruc.ASslice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.ASslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64slice\"")
			} else {
				r.EncodeString(`AI64slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AI64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.TestStrucCommon.AnonInTestStruc.AI64slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AI64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64slice\"")
			} else {
				r.EncodeString(`AUi64slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AUi64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.TestStrucCommon.AnonInTestStruc.AUi64slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AUi64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AF64slice\"")
			} else {
				r.EncodeString(`AF64slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AF64slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat64V(x.TestStrucCommon.AnonInTestStruc.AF64slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AF64slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AF32slice\"")
			} else {
				r.EncodeString(`AF32slice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AF32slice == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceFloat32V(x.TestStrucCommon.AnonInTestStruc.AF32slice, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AF32slice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSS\"")
			} else {
				r.EncodeString(`AMSS`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AMSS == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.TestStrucCommon.AnonInTestStruc.AMSS, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSS map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64\"")
			} else {
				r.EncodeString(`AMSU64`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AMSU64 == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.TestStrucCommon.AnonInTestStruc.AMSU64, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSU64 map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64arr8\"")
			} else {
				r.EncodeString(`AI64arr8`)
			}
			z.EncWriteMapElemValue()
			yy169 := &x.TestStrucCommon.AnonInTestStruc.AI64arr8
			h.encArray8int64((*[8]int64)(yy169), e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64arr0\"")
			} else {
				r.EncodeString(`AI64arr0`)
			}
			z.EncWriteMapElemValue()
			yy171 := &x.TestStrucCommon.AnonInTestStruc.AI64arr0
			h.encArray0int64((*[0]int64)(yy171), e)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AI64slice0\"")
			} else {
				r.EncodeString(`AI64slice0`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AI64slice0 == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceInt64V(x.TestStrucCommon.AnonInTestStruc.AI64slice0, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AI64slice0 slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AUi64sliceN\"")
			} else {
				r.EncodeString(`AUi64sliceN`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AUi64sliceN == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint64V(x.TestStrucCommon.AnonInTestStruc.AUi64sliceN, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AUi64sliceN slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64N\"")
			} else {
				r.EncodeString(`AMSU64N`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AMSU64N == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.TestStrucCommon.AnonInTestStruc.AMSU64N, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSU64N map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"AMSU64E\"")
			} else {
				r.EncodeString(`AMSU64E`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.AnonInTestStruc.AMSU64E == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringUint64V(x.TestStrucCommon.AnonInTestStruc.AMSU64E, e)
			} // end block: if x.TestStrucCommon.AnonInTestStruc.AMSU64E map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"NotAnon\"")
			} else {
				r.EncodeString(`NotAnon`)
			}
			z.EncWriteMapElemValue()
			yy177 := &x.TestStrucCommon.NotAnon
			if yyxt178 := z.Extension(yy177); yyxt178 != nil {
				z.EncExtension(yy177, yyxt178)
			} else {
				yy177.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nmap\"")
			} else {
				r.EncodeString(`Nmap`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Nmap == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringBoolV(x.TestStrucCommon.Nmap, e)
			} // end block: if x.TestStrucCommon.Nmap map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nslice\"")
			} else {
				r.EncodeString(`Nslice`)
			}
			z.EncWriteMapElemValue()
			if x.TestStrucCommon.Nslice == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.TestStrucCommon.Nslice))
			} // end block: if x.TestStrucCommon.Nslice slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nint64\"")
			} else {
				r.EncodeString(`Nint64`)
			}
			z.EncWriteMapElemValue()
			if yyn56 {
				r.EncodeNil()
			} else {
				yy181 := *x.TestStrucCommon.Nint64
				r.EncodeInt(int64(yy181))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Mtsptr\"")
			} else {
				r.EncodeString(`Mtsptr`)
			}
			z.EncWriteMapElemValue()
			if x.Mtsptr == nil {
				r.EncodeNil()
			} else {
				h.encMapstringPtrtoTestStruc((map[string]*TestStruc)(x.Mtsptr), e)
			} // end block: if x.Mtsptr map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Mts\"")
			} else {
				r.EncodeString(`Mts`)
			}
			z.EncWriteMapElemValue()
			if x.Mts == nil {
				r.EncodeNil()
			} else {
				h.encMapstringTestStruc((map[string]TestStruc)(x.Mts), e)
			} // end block: if x.Mts map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Its\"")
			} else {
				r.EncodeString(`Its`)
			}
			z.EncWriteMapElemValue()
			if x.Its == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoTestStruc(([]*TestStruc)(x.Its), e)
			} // end block: if x.Its slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Nteststruc\"")
			} else {
				r.EncodeString(`Nteststruc`)
			}
			z.EncWriteMapElemValue()
			if yyn60 {
				r.EncodeNil()
			} else {
				if yyxt186 := z.Extension(x.Nteststruc); yyxt186 != nil {
					z.EncExtension(x.Nteststruc, yyxt186)
				} else {
					x.Nteststruc.CodecEncodeSelf(e)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *TestStruc) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9299 {
		*(x) = TestStruc{}
	} else if yyct2 == codecSelferValueTypeMap9299 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9299 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9299)
	}
}

func (x *TestStruc) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "S":
			x.TestStrucCommon.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "I64":
			x.TestStrucCommon.I64 = (int64)(r.DecodeInt64())
		case "I32":
			x.TestStrucCommon.I32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
		case "I16":
			x.TestStrucCommon.I16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "I8":
			x.TestStrucCommon.I8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
		case "I64n":
			x.TestStrucCommon.I64n = (int64)(r.DecodeInt64())
		case "I32n":
			x.TestStrucCommon.I32n = (int32)(z.C.IntV(r.DecodeInt64(), 32))
		case "I16n":
			x.TestStrucCommon.I16n = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "I8n":
			x.TestStrucCommon.I8n = (int8)(z.C.IntV(r.DecodeInt64(), 8))
		case "Ui64":
			x.TestStrucCommon.Ui64 = (uint64)(r.DecodeUint64())
		case "Ui32":
			x.TestStrucCommon.Ui32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		case "Ui16":
			x.TestStrucCommon.Ui16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
		case "Ui8":
			x.TestStrucCommon.Ui8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		case "F64":
			x.TestStrucCommon.F64 = (float64)(r.DecodeFloat64())
		case "F32":
			x.TestStrucCommon.F32 = (float32)(z.DecDecodeFloat32())
		case "B":
			x.TestStrucCommon.B = (bool)(r.DecodeBool())
		case "By":
			x.TestStrucCommon.By = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		case "Sslice":
			z.F.DecSliceStringX(&x.TestStrucCommon.Sslice, d)
		case "I64slice":
			z.F.DecSliceInt64X(&x.TestStrucCommon.I64slice, d)
		case "I32slice":
			z.F.DecSliceInt32X(&x.TestStrucCommon.I32slice, d)
		case "Ui64slice":
			z.F.DecSliceUint64X(&x.TestStrucCommon.Ui64slice, d)
		case "Ui8slice":
			x.TestStrucCommon.Ui8slice = z.DecodeBytesInto(([]byte)(x.TestStrucCommon.Ui8slice))
		case "Bslice":
			z.F.DecSliceBoolX(&x.TestStrucCommon.Bslice, d)
		case "Byslice":
			x.TestStrucCommon.Byslice = z.DecodeBytesInto(([]byte)(x.TestStrucCommon.Byslice))
		case "BytesSlice":
			z.F.DecSliceBytesX(&x.TestStrucCommon.BytesSlice, d)
		case "Iptrslice":
			h.decSlicePtrtoint64((*[]*int64)(&x.TestStrucCommon.Iptrslice), d)
		case "WrapSliceInt64":
			if yyxt40 := z.Extension(x.TestStrucCommon.WrapSliceInt64); yyxt40 != nil {
				z.DecExtension(&x.TestStrucCommon.WrapSliceInt64, yyxt40)
			} else {
				x.TestStrucCommon.WrapSliceInt64.CodecDecodeSelf(d)
			}
		case "WrapSliceString":
			if yyxt42 := z.Extension(x.TestStrucCommon.WrapSliceString); yyxt42 != nil {
				z.DecExtension(&x.TestStrucCommon.WrapSliceString, yyxt42)
			} else {
				x.TestStrucCommon.WrapSliceString.CodecDecodeSelf(d)
			}
		case "Msint":
			z.F.DecMapStringIntX(&x.TestStrucCommon.Msint, d)
		case "Msbytes":
			z.F.DecMapStringBytesX(&x.TestStrucCommon.Msbytes, d)
		case "Simplef":
			if yyxt48 := z.Extension(x.TestStrucCommon.Simplef); yyxt48 != nil {
				z.DecExtension(&x.TestStrucCommon.Simplef, yyxt48)
			} else {
				x.TestStrucCommon.Simplef.CodecDecodeSelf(d)
			}
		case "SstrUi64T":
			h.decSlicestringUint64T((*[]stringUint64T)(&x.TestStrucCommon.SstrUi64T), d)
		case "MstrUi64T":
			h.decMapstringPtrtostringUint64T((*map[string]*stringUint64T)(&x.TestStrucCommon.MstrUi64T), d)
		case "AS":
			x.TestStrucCommon.AnonInTestStruc.AS = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "AI64":
			x.TestStrucCommon.AnonInTestStruc.AI64 = (int64)(r.DecodeInt64())
		case "AI16":
			x.TestStrucCommon.AnonInTestStruc.AI16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		case "AUi64":
			x.TestStrucCommon.AnonInTestStruc.AUi64 = (uint64)(r.DecodeUint64())
		case "ASslice":
			z.F.DecSliceStringX(&x.TestStrucCommon.AnonInTestStruc.ASslice, d)
		case "AI64slice":
			z.F.DecSliceInt64X(&x.TestStrucCommon.AnonInTestStruc.AI64slice, d)
		case "AUi64slice":
			z.F.DecSliceUint64X(&x.TestStrucCommon.AnonInTestStruc.AUi64slice, d)
		case "AF64slice":
			z.F.DecSliceFloat64X(&x.TestStrucCommon.AnonInTestStruc.AF64slice, d)
		case "AF32slice":
			z.F.DecSliceFloat32X(&x.TestStrucCommon.AnonInTestStruc.AF32slice, d)
		case "AMSS":
			z.F.DecMapStringStringX(&x.TestStrucCommon.AnonInTestStruc.AMSS, d)
		case "AMSU64":
			z.F.DecMapStringUint64X(&x.TestStrucCommon.AnonInTestStruc.AMSU64, d)
		case "AI64arr8":
			h.decArray8int64((*[8]int64)(&x.TestStrucCommon.AnonInTestStruc.AI64arr8), d)
		case "AI64arr0":
			h.decArray0int64((*[0]int64)(&x.TestStrucCommon.AnonInTestStruc.AI64arr0), d)
		case "AI64slice0":
			z.F.DecSliceInt64X(&x.TestStrucCommon.AnonInTestStruc.AI64slice0, d)
		case "AUi64sliceN":
			z.F.DecSliceUint64X(&x.TestStrucCommon.AnonInTestStruc.AUi64sliceN, d)
		case "AMSU64N":
			z.F.DecMapStringUint64X(&x.TestStrucCommon.AnonInTestStruc.AMSU64N, d)
		case "AMSU64E":
			z.F.DecMapStringUint64X(&x.TestStrucCommon.AnonInTestStruc.AMSU64E, d)
		case "NotAnon":
			if yyxt84 := z.Extension(x.TestStrucCommon.NotAnon); yyxt84 != nil {
				z.DecExtension(&x.TestStrucCommon.NotAnon, yyxt84)
			} else {
				x.TestStrucCommon.NotAnon.CodecDecodeSelf(d)
			}
		case "Nmap":
			z.F.DecMapStringBoolX(&x.TestStrucCommon.Nmap, d)
		case "Nslice":
			x.TestStrucCommon.Nslice = z.DecodeBytesInto(([]byte)(x.TestStrucCommon.Nslice))
		case "Nint64":
			if r.TryNil() {
				if x.TestStrucCommon.Nint64 != nil { // remove the if-true
					x.TestStrucCommon.Nint64 = nil
				}
			} else {
				if x.TestStrucCommon.Nint64 == nil {
					x.TestStrucCommon.Nint64 = new(int64)
				}
				*x.TestStrucCommon.Nint64 = (int64)(r.DecodeInt64())
			}
		case "Mtsptr":
			h.decMapstringPtrtoTestStruc((*map[string]*TestStruc)(&x.Mtsptr), d)
		case "Mts":
			h.decMapstringTestStruc((*map[string]TestStruc)(&x.Mts), d)
		case "Its":
			h.decSlicePtrtoTestStruc((*[]*TestStruc)(&x.Its), d)
		case "Nteststruc":
			if r.TryNil() {
				if x.Nteststruc != nil { // remove the if-true
					x.Nteststruc = nil
				}
			} else {
				if x.Nteststruc == nil {
					x.Nteststruc = new(TestStruc)
				}
				if yyxt98 := z.Extension(x.Nteststruc); yyxt98 != nil {
					z.DecExtension(x.Nteststruc, yyxt98)
				} else {
					x.Nteststruc.CodecDecodeSelf(d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *TestStruc) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj99 int
	var yyb99 bool
	var yyhl99 bool = l >= 0
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.S = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I64 = (int64)(r.DecodeInt64())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I64n = (int64)(r.DecodeInt64())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I32n = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I16n = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.I8n = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Ui64 = (uint64)(r.DecodeUint64())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Ui32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Ui16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Ui8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.F64 = (float64)(r.DecodeFloat64())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.F32 = (float32)(z.DecDecodeFloat32())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.B = (bool)(r.DecodeBool())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.By = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.TestStrucCommon.Sslice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.TestStrucCommon.I64slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt32X(&x.TestStrucCommon.I32slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.TestStrucCommon.Ui64slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Ui8slice = z.DecodeBytesInto(([]byte)(x.TestStrucCommon.Ui8slice))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceBoolX(&x.TestStrucCommon.Bslice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Byslice = z.DecodeBytesInto(([]byte)(x.TestStrucCommon.Byslice))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceBytesX(&x.TestStrucCommon.BytesSlice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoint64((*[]*int64)(&x.TestStrucCommon.Iptrslice), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt136 := z.Extension(x.TestStrucCommon.WrapSliceInt64); yyxt136 != nil {
		z.DecExtension(&x.TestStrucCommon.WrapSliceInt64, yyxt136)
	} else {
		x.TestStrucCommon.WrapSliceInt64.CodecDecodeSelf(d)
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt138 := z.Extension(x.TestStrucCommon.WrapSliceString); yyxt138 != nil {
		z.DecExtension(&x.TestStrucCommon.WrapSliceString, yyxt138)
	} else {
		x.TestStrucCommon.WrapSliceString.CodecDecodeSelf(d)
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringIntX(&x.TestStrucCommon.Msint, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringBytesX(&x.TestStrucCommon.Msbytes, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt144 := z.Extension(x.TestStrucCommon.Simplef); yyxt144 != nil {
		z.DecExtension(&x.TestStrucCommon.Simplef, yyxt144)
	} else {
		x.TestStrucCommon.Simplef.CodecDecodeSelf(d)
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicestringUint64T((*[]stringUint64T)(&x.TestStrucCommon.SstrUi64T), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decMapstringPtrtostringUint64T((*map[string]*stringUint64T)(&x.TestStrucCommon.MstrUi64T), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.AnonInTestStruc.AS = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.AnonInTestStruc.AI64 = (int64)(r.DecodeInt64())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.AnonInTestStruc.AI16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.AnonInTestStruc.AUi64 = (uint64)(r.DecodeUint64())
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.TestStrucCommon.AnonInTestStruc.ASslice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.TestStrucCommon.AnonInTestStruc.AI64slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.TestStrucCommon.AnonInTestStruc.AUi64slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceFloat64X(&x.TestStrucCommon.AnonInTestStruc.AF64slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceFloat32X(&x.TestStrucCommon.AnonInTestStruc.AF32slice, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.TestStrucCommon.AnonInTestStruc.AMSS, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.TestStrucCommon.AnonInTestStruc.AMSU64, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray8int64((*[8]int64)(&x.TestStrucCommon.AnonInTestStruc.AI64arr8), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray0int64((*[0]int64)(&x.TestStrucCommon.AnonInTestStruc.AI64arr0), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceInt64X(&x.TestStrucCommon.AnonInTestStruc.AI64slice0, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceUint64X(&x.TestStrucCommon.AnonInTestStruc.AUi64sliceN, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.TestStrucCommon.AnonInTestStruc.AMSU64N, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringUint64X(&x.TestStrucCommon.AnonInTestStruc.AMSU64E, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt180 := z.Extension(x.TestStrucCommon.NotAnon); yyxt180 != nil {
		z.DecExtension(&x.TestStrucCommon.NotAnon, yyxt180)
	} else {
		x.TestStrucCommon.NotAnon.CodecDecodeSelf(d)
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringBoolX(&x.TestStrucCommon.Nmap, d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.TestStrucCommon.Nslice = z.DecodeBytesInto(([]byte)(x.TestStrucCommon.Nslice))
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.TestStrucCommon.Nint64 != nil { // remove the if-true
			x.TestStrucCommon.Nint64 = nil
		}
	} else {
		if x.TestStrucCommon.Nint64 == nil {
			x.TestStrucCommon.Nint64 = new(int64)
		}
		*x.TestStrucCommon.Nint64 = (int64)(r.DecodeInt64())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decMapstringPtrtoTestStruc((*map[string]*TestStruc)(&x.Mtsptr), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decMapstringTestStruc((*map[string]TestStruc)(&x.Mts), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoTestStruc((*[]*TestStruc)(&x.Its), d)
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = z.DecCheckBreak()
	}
	if yyb99 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Nteststruc != nil { // remove the if-true
			x.Nteststruc = nil
		}
	} else {
		if x.Nteststruc == nil {
			x.Nteststruc = new(TestStruc)
		}
		if yyxt194 := z.Extension(x.Nteststruc); yyxt194 != nil {
			z.DecExtension(x.Nteststruc, yyxt194)
		} else {
			x.Nteststruc.CodecDecodeSelf(d)
		}
	}
	for {
		yyj99++
		if yyhl99 {
			yyb99 = yyj99 > l
		} else {
			yyb99 = z.DecCheckBreak()
		}
		if yyb99 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj99-1, "")
	}
}

func (x *TestStruc) IsCodecEmpty() bool {
	return !(!(x.TestStrucCommon.IsCodecEmpty()) || len(x.Mtsptr) != 0 || len(x.Mts) != 0 || len(x.Its) != 0 || false)
}

func (x codecSelfer9299) encwrapUint64Slice(v wrapUint64Slice, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if yyxt2 := z.Extension(v[yyv1]); yyxt2 != nil {
			z.EncExtension(v[yyv1], yyxt2)
		} else {
			v[yyv1].CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decwrapUint64Slice(v *wrapUint64Slice, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []wrapUint64{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]wrapUint64, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]wrapUint64, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]wrapUint64, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9299) encwrapStringSlice(v wrapStringSlice, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if yyxt2 := z.Extension(v[yyv1]); yyxt2 != nil {
			z.EncExtension(v[yyv1], yyxt2)
		} else {
			v[yyv1].CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decwrapStringSlice(v *wrapStringSlice, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []wrapString{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]wrapString, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]wrapString, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]wrapString, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9299) encArray8int64(v *[8]int64, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		r.EncodeInt(int64(v[yyv1]))
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decArray8int64(v *[8]int64, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := v
	yyh1, yyl1 := z.DecSliceHelperStart()
	if yyl1 == 0 {
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				z.DecArrayCannotExpand(len(v), yyj1+1)
				yydb1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				yyv1[yyj1] = (int64)(r.DecodeInt64())
			}
		}
	}
	yyh1.End()
}

func (x codecSelfer9299) encArray0int64(v *[0]int64, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		r.EncodeInt(int64(v[yyv1]))
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decArray0int64(v *[0]int64, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := v
	yyh1, yyl1 := z.DecSliceHelperStart()
	if yyl1 == 0 {
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				z.DecArrayCannotExpand(len(v), yyj1+1)
				yydb1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				yyv1[yyj1] = (int64)(r.DecodeInt64())
			}
		}
	}
	yyh1.End()
}

func (x codecSelfer9299) encSlicePtrtoint64(v []*int64, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if v[yyv1] == nil {
			r.EncodeNil()
		} else {
			yy2 := *v[yyv1]
			r.EncodeInt(int64(yy2))
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decSlicePtrtoint64(v *[]*int64, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*int64{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*int64, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*int64, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(int64)
					}
					*yyv1[yyj1] = (int64)(r.DecodeInt64())
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*int64, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9299) encSlicestringUint64T(v []stringUint64T, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			yy2.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decSlicestringUint64T(v *[]stringUint64T, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []stringUint64T{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]stringUint64T, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]stringUint64T, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, stringUint64T{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]stringUint64T, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9299) encMapstringPtrtostringUint64T(v map[string]*stringUint64T, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
	} else if z.EncBasicHandle().Canonical {
		z.EncEncodeMapNonNil(v)
	} else {
		z.EncWriteMapStart(len(v))
		for yyk1, yyv1 := range v {
			z.EncWriteMapElemKey()
			r.EncodeString(string(yyk1))
			z.EncWriteMapElemValue()
			if yyv1 == nil {
				r.EncodeNil()
			} else {
				if yyxt3 := z.Extension(yyv1); yyxt3 != nil {
					z.EncExtension(yyv1, yyxt3)
				} else {
					yyv1.CodecEncodeSelf(e)
				}
			}
		}
		z.EncWriteMapEnd()
	}
}

func (x codecSelfer9299) decMapstringPtrtostringUint64T(v *map[string]*stringUint64T, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := z.DecReadMapStart()
	if yyl1 == codecSelferDecContainerLenNil9299 {
		*v = nil
	} else {
		if yyv1 == nil {
			yyrl1 := z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
			yyv1 = make(map[string]*stringUint64T, yyrl1)
			*v = yyv1
		}
		var yymk1 string
		var yymv1 *stringUint64T
		var yymg1, yymdn1, yyms1, yymok1 bool
		if z.DecBasicHandle().MapValueReset {
			yymg1 = true
		}
		if yyl1 != 0 {
			yyhl1 := yyl1 > 0
			for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ {
				z.DecReadMapElemKey()
				yymk1 = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
				yyms1 = true
				if yymg1 {
					yymv1, yymok1 = yyv1[yymk1]
					if yymok1 {
						yyms1 = false
					}
				} else {
					yymv1 = nil
				}
				z.DecReadMapElemValue()
				yymdn1 = false
				if r.TryNil() {
					yymdn1 = true
				} else {
					if yymv1 == nil {
						yymv1 = new(stringUint64T)
					}
					if yyxt4 := z.Extension(yymv1); yyxt4 != nil {
						z.DecExtension(yymv1, yyxt4)
					} else {
						yymv1.CodecDecodeSelf(d)
					}
				}
				if yymdn1 {
					yyv1[yymk1] = nil
				} else if yyms1 {
					yyv1[yymk1] = yymv1
				}
			}
		} // else len==0: leave as-is (do not clear map entries)
		z.DecReadMapEnd()
	}
}

func (x codecSelfer9299) encMapstringPtrtoTestStruc(v map[string]*TestStruc, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
	} else if z.EncBasicHandle().Canonical {
		z.EncEncodeMapNonNil(v)
	} else {
		z.EncWriteMapStart(len(v))
		for yyk1, yyv1 := range v {
			z.EncWriteMapElemKey()
			r.EncodeString(string(yyk1))
			z.EncWriteMapElemValue()
			if yyv1 == nil {
				r.EncodeNil()
			} else {
				if yyxt3 := z.Extension(yyv1); yyxt3 != nil {
					z.EncExtension(yyv1, yyxt3)
				} else {
					yyv1.CodecEncodeSelf(e)
				}
			}
		}
		z.EncWriteMapEnd()
	}
}

func (x codecSelfer9299) decMapstringPtrtoTestStruc(v *map[string]*TestStruc, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := z.DecReadMapStart()
	if yyl1 == codecSelferDecContainerLenNil9299 {
		*v = nil
	} else {
		if yyv1 == nil {
			yyrl1 := z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
			yyv1 = make(map[string]*TestStruc, yyrl1)
			*v = yyv1
		}
		var yymk1 string
		var yymv1 *TestStruc
		var yymg1, yymdn1, yyms1, yymok1 bool
		if z.DecBasicHandle().MapValueReset {
			yymg1 = true
		}
		if yyl1 != 0 {
			yyhl1 := yyl1 > 0
			for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ {
				z.DecReadMapElemKey()
				yymk1 = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
				yyms1 = true
				if yymg1 {
					yymv1, yymok1 = yyv1[yymk1]
					if yymok1 {
						yyms1 = false
					}
				} else {
					yymv1 = nil
				}
				z.DecReadMapElemValue()
				yymdn1 = false
				if r.TryNil() {
					yymdn1 = true
				} else {
					if yymv1 == nil {
						yymv1 = new(TestStruc)
					}
					if yyxt4 := z.Extension(yymv1); yyxt4 != nil {
						z.DecExtension(yymv1, yyxt4)
					} else {
						yymv1.CodecDecodeSelf(d)
					}
				}
				if yymdn1 {
					yyv1[yymk1] = nil
				} else if yyms1 {
					yyv1[yymk1] = yymv1
				}
			}
		} // else len==0: leave as-is (do not clear map entries)
		z.DecReadMapEnd()
	}
}

func (x codecSelfer9299) encMapstringTestStruc(v map[string]TestStruc, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
	} else if z.EncBasicHandle().Canonical {
		z.EncEncodeMapNonNil(v)
	} else {
		z.EncWriteMapStart(len(v))
		for yyk1, yyv1 := range v {
			z.EncWriteMapElemKey()
			r.EncodeString(string(yyk1))
			z.EncWriteMapElemValue()
			yy3 := &yyv1
			if yyxt4 := z.Extension(yy3); yyxt4 != nil {
				z.EncExtension(yy3, yyxt4)
			} else {
				yy3.CodecEncodeSelf(e)
			}
		}
		z.EncWriteMapEnd()
	}
}

func (x codecSelfer9299) decMapstringTestStruc(v *map[string]TestStruc, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := z.DecReadMapStart()
	if yyl1 == codecSelferDecContainerLenNil9299 {
		*v = nil
	} else {
		if yyv1 == nil {
			yyrl1 := z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1368)
			yyv1 = make(map[string]TestStruc, yyrl1)
			*v = yyv1
		}
		var yymk1 string
		var yymv1 TestStruc
		var yymg1, yymdn1 bool
		if z.DecBasicHandle().MapValueReset {
			yymg1 = true
		}
		if yyl1 != 0 {
			yyhl1 := yyl1 > 0
			for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ {
				z.DecReadMapElemKey()
				yymk1 = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
				if yymg1 {
					yymv1 = yyv1[yymk1]
				} else {
					yymv1 = TestStruc{}
				}
				z.DecReadMapElemValue()
				yymdn1 = false
				if yyxt4 := z.Extension(yymv1); yyxt4 != nil {
					z.DecExtension(&yymv1, yyxt4)
				} else {
					yymv1.CodecDecodeSelf(d)
				}
				if yymdn1 {
					yyv1[yymk1] = TestStruc{}
				} else {
					yyv1[yymk1] = yymv1
				}
			}
		} // else len==0: leave as-is (do not clear map entries)
		z.DecReadMapEnd()
	}
}

func (x codecSelfer9299) encSlicePtrtoTestStruc(v []*TestStruc, e *codec1978.Encoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if v[yyv1] == nil {
			r.EncodeNil()
		} else {
			if yyxt2 := z.Extension(v[yyv1]); yyxt2 != nil {
				z.EncExtension(v[yyv1], yyxt2)
			} else {
				v[yyv1].CodecEncodeSelf(e)
			}
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9299) decSlicePtrtoTestStruc(v *[]*TestStruc, d *codec1978.Decoder) {
	var h codecSelfer9299
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TestStruc{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TestStruc, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*TestStruc, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TestStruc)
					}
					if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						yyv1[yyj1].CodecDecodeSelf(d)
					}
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*TestStruc, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
